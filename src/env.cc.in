/*
 * Copyright (C) 2014-2017 Olzhas Rakhimov
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

/// @file env.cc.in
/// Implementation of Env class.
/// The variables are filled by CMake or discovered at run-time.

#include "env.h"

#include <boost/predef.h>

#if BOOST_OS_WINDOWS
#include <iostream>

#include <windows.h>

#include <boost/filesystem.hpp>

/// Finds the installation directory on Windows.
///
/// @returns POSIX path to the installation directory.
///
/// @pre The main executable is located at "install_dir/bin/prog.exe".
///
/// @note Exits the program with 1
///       if system calls fail.
///
/// @warning The code must be compiled with Unicode support.
static std::string GetInstallPath() {
  // The following code doesn't conform to TCHAR, DWORD Windows nonsense.
  wchar_t buffer[MAX_PATH] = {};
  int ret = GetModuleFileNameW(nullptr, buffer, MAX_PATH);  // windows.h
  if (ret == 0 || ret == MAX_PATH) {
    std::cerr << "Failure to retrieve installation directory.\n"
              << "OS error code: " << GetLastError() << std::endl;
    std::exit(1);
  }
  return boost::filesystem::path(buffer)  // executable
      .parent_path()  // bin
      .parent_path()  // install
      .generic_string();  // POSIX format.
}
#else
/// @returns Path to the installation directory known at compile-time.
static std::string GetInstallPath() { return "@scram_install_dir@"; }  // NOLINT
#endif

namespace scram {

const std::string Env::kInstallDir_ = GetInstallPath();  // NOLINT

std::string Env::config_schema() {
  return kInstallDir_ + "/share/scram/config.rng";
}

std::string Env::input_schema() {
  return kInstallDir_ + "/share/scram/input.rng";
}

std::string Env::report_schema() {
  return kInstallDir_ + "/share/scram/report.rng";
}

}  // namespace scram
