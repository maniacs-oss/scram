<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>expression.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">expression.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="expression_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2014-2017 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file expression.h</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Provides the base class for all expressions</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">/// and units for expression values.</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#ifndef SCRAM_SRC_EXPRESSION_H_</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#define SCRAM_SRC_EXPRESSION_H_</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;algorithm&gt;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;sstream&gt;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;utility&gt;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &lt;boost/icl/continuous_interval.hpp&gt;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;boost/noncopyable.hpp&gt;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="element_8h.xhtml">element.h</a>&quot;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="error_8h.xhtml">error.h</a>&quot;</span></div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram.xhtml">scram</a> {</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="keyword">namespace </span>mef {</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">/// Validation domain interval for expression values.</span></div><div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="expression_8h.xhtml#afc9530f5ba8d4c2ccf0b40c7422a44c0">   41</a></span>&#160;<span class="comment"></span><span class="keyword">using</span> <a class="code" href="expression_8h.xhtml#afc9530f5ba8d4c2ccf0b40c7422a44c0">Interval</a> = boost::icl::continuous_interval&lt;double&gt;;<span class="comment"></span></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">/// left_open, open, right_open, closed bounds.</span></div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">/// @todo Interval bound propagation upon operations on boundary values.</span></div><div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="expression_8h.xhtml#ac6e99f00ddefbc8b1ae808138c088b19">   44</a></span>&#160;<span class="comment"></span><span class="keyword">using</span> <a class="code" href="expression_8h.xhtml#ac6e99f00ddefbc8b1ae808138c088b19">IntervalBounds</a> = boost::icl::interval_bounds;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">/// Returns true if a given interval contains a given value.</span></div><div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="expression_8h.xhtml#a3876b976ae2dd7f37465f916315829a1">   47</a></span>&#160;<span class="comment"></span><span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="expression_8h.xhtml#a3876b976ae2dd7f37465f916315829a1">Contains</a>(<span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#afc9530f5ba8d4c2ccf0b40c7422a44c0">Interval</a>&amp; interval, <span class="keywordtype">double</span> value) {</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;  <span class="keywordflow">return</span> boost::icl::contains(interval, Interval::closed(value, value));</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;}</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">/// Checks if a given interval is within the probability domain.</span></div><div class="line"><a name="l00052"></a><span class="lineno"><a class="line" href="expression_8h.xhtml#a7b3a2de3be05128d51eaa76c01de99f6">   52</a></span>&#160;<span class="comment"></span><span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="expression_8h.xhtml#a7b3a2de3be05128d51eaa76c01de99f6">IsProbability</a>(<span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#afc9530f5ba8d4c2ccf0b40c7422a44c0">Interval</a>&amp; interval) {</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;  <span class="keywordflow">return</span> boost::icl::within(interval, Interval::closed(0, 1));</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;}</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment">/// Checks if all values in a given interval are non-negative.</span></div><div class="line"><a name="l00057"></a><span class="lineno"><a class="line" href="expression_8h.xhtml#a5682dd6fbc6d7dd33ebf8b5665006b99">   57</a></span>&#160;<span class="comment"></span><span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="expression_8h.xhtml#a5682dd6fbc6d7dd33ebf8b5665006b99">IsNonNegative</a>(<span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#afc9530f5ba8d4c2ccf0b40c7422a44c0">Interval</a>&amp; interval) {</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;  <span class="keywordflow">return</span> interval.lower() &gt;= 0;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;}</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">/// Checks if all values in a given interval are positive.</span></div><div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="expression_8h.xhtml#a4962ab79380de2b807438620d16a098e">   62</a></span>&#160;<span class="comment"></span><span class="keyword">inline</span> <span class="keywordtype">bool</span> <a class="code" href="expression_8h.xhtml#a4962ab79380de2b807438620d16a098e">IsPositive</a>(<span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#afc9530f5ba8d4c2ccf0b40c7422a44c0">Interval</a>&amp; interval) {</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="expression_8h.xhtml#a5682dd6fbc6d7dd33ebf8b5665006b99">IsNonNegative</a>(interval) &amp;&amp; !<a class="code" href="expression_8h.xhtml#a3876b976ae2dd7f37465f916315829a1">Contains</a>(interval, 0);</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;}</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">/// Abstract base class for all sorts of expressions to describe events.</span></div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">/// This class also acts like a connector for parameter nodes</span></div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">/// and may create cycles.</span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">/// Expressions are not expected to be shared</span></div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment">/// except for parameters.</span></div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">/// In addition, expressions are not expected to be changed</span></div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">/// after validation phases.</span></div><div class="line"><a name="l00073"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Expression.xhtml">   73</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a> : <span class="keyword">private</span> boost::noncopyable {</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">  /// Constructor for use by derived classes</span></div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">  /// to register their arguments.</span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">  /// @param[in] args  Arguments of this expression.</span></div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment"></span>  <span class="keyword">explicit</span> <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a1700295154b8db507896804ad4307c14">Expression</a>(std::vector&lt;Expression*&gt; <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac22fdb9ced7ef6942f666337b6a34110">args</a> = {});</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;  <span class="keyword">virtual</span> ~<a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment">  /// @returns A set of arguments of the expression.</span></div><div class="line"><a name="l00084"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Expression.xhtml#ac22fdb9ced7ef6942f666337b6a34110">   84</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> std::vector&lt;Expression*&gt;&amp; <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac22fdb9ced7ef6942f666337b6a34110">args</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> args_; }</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment">  /// Validates the expression.</span></div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">  /// This late validation is due to parameters that are defined late.</span></div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">  /// @throws InvalidArgument  The arguments are invalid for setup.</span></div><div class="line"><a name="l00090"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Expression.xhtml#af3e09d926b52f6077aa85c26454c4e18">   90</a></span>&#160;<span class="comment"></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#af3e09d926b52f6077aa85c26454c4e18">Validate</a>()<span class="keyword"> const </span>{}</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment">  /// @returns The mean value of this expression.</span></div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment"></span>  <span class="keyword">virtual</span> <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#af4c1a5cb29e8f45623a99742b7ba8bc5">value</a>() noexcept = 0;</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">  /// @returns The domain interval for validation purposes only.</span></div><div class="line"><a name="l00096"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Expression.xhtml#a179b21e75df522673e6d51b784d10e86">   96</a></span>&#160;<span class="comment"></span>  <span class="keyword">virtual</span> <a class="code" href="expression_8h.xhtml#afc9530f5ba8d4c2ccf0b40c7422a44c0">Interval</a> <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a179b21e75df522673e6d51b784d10e86">interval</a>() noexcept {</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#af4c1a5cb29e8f45623a99742b7ba8bc5">value</a> = this-&gt;<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#af4c1a5cb29e8f45623a99742b7ba8bc5">value</a>();</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keywordflow">return</span> Interval::closed(value, value);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;  }</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment">  /// Determines if the value of the expression contains deviate expressions.</span></div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment">  /// The default logic is to check arguments with uncertainties for sampling.</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">  /// Derived expression classes must decide</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment">  /// if they don&#39;t have arguments,</span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">  /// or if they are random deviates.</span></div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment">  /// @returns true if the expression&#39;s value deviates from its mean.</span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">  /// @returns false if the expression&#39;s value does not need sampling.</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">  /// @warning Improper registration of arguments</span></div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="comment">  ///          may yield silent failure.</span></div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="comment"></span>  <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a058aef65da884a47ea3345bc31488b7a">IsDeviate</a>() noexcept;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="comment">  /// @returns A sampled value of this expression.</span></div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="comment"></span>  <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a5cf00d8b2ff843ad029a501a89ee572a">Sample</a>() noexcept;</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">  /// This routine resets the sampling to get new values.</span></div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="comment">  /// All the arguments are called to reset themselves.</span></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment">  /// If this expression was not sampled,</span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">  /// its arguments are not going to get any calls.</span></div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ab6d31c4ddb5d4a827727829cbd4e4449">Reset</a>() noexcept;</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160; <span class="keyword">protected</span>:<span class="comment"></span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">  /// Registers an additional argument expression.</span></div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;<span class="comment">  /// @param[in] arg  An argument expression used by this expression.</span></div><div class="line"><a name="l00127"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Expression.xhtml#ac636368fbb89921e75d120d5ac154ac1">  127</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac636368fbb89921e75d120d5ac154ac1">AddArg</a>(<a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* arg) { args_.push_back(arg); }</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160; <span class="keyword">private</span>:<span class="comment"></span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment">  /// Runs sampling of the expression.</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment">  /// Derived concrete classes must provide the calculation.</span></div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment">  /// @returns A sampled value of this expression.</span></div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="comment"></span>  <span class="keyword">virtual</span> <span class="keywordtype">double</span> DoSample() noexcept = 0;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;  std::vector&lt;Expression*&gt; args_;  <span class="comment">///&lt; Expression&#39;s arguments.</span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment"></span>  <span class="keywordtype">double</span> sampled_value_;  <span class="comment">///&lt; The sampled value.</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> sampled_;  <span class="comment">///&lt; Indication if the expression is already sampled.</span></div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="comment">/// CRTP for Expressions with the same formula to evaluate and sample.</span></div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;<span class="comment">/// @tparam T  The Expression type with Compute function.</span></div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00145"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1ExpressionFormula.xhtml">  145</a></span>&#160;<span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1ExpressionFormula.xhtml">ExpressionFormula</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a> {</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160; <span class="keyword">public</span>:</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;  <span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a1700295154b8db507896804ad4307c14">Expression::Expression</a>;</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment">  /// Computes the expression with argument expression default values.</span></div><div class="line"><a name="l00150"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1ExpressionFormula.xhtml#a1f7c71744d679ab1a4e5ca3ca98277a6">  150</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1ExpressionFormula.xhtml#a1f7c71744d679ab1a4e5ca3ca98277a6">value</a>() noexcept final {</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>T*<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;Compute(</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        [](<a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* arg) { <span class="keywordflow">return</span> arg-&gt;<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#af4c1a5cb29e8f45623a99742b7ba8bc5">value</a>(); });</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;  }</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160; <span class="keyword">private</span>:<span class="comment"></span></div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment">  /// Computes the expression with argument expression sampled values.</span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment"></span>  <span class="keywordtype">double</span> DoSample() noexcept <span class="keyword">final</span> {</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">static_cast&lt;</span>T*<span class="keyword">&gt;</span>(<span class="keyword">this</span>)-&gt;Compute(</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;        [](<a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* arg) { <span class="keywordflow">return</span> arg-&gt;<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a5cf00d8b2ff843ad029a501a89ee572a">Sample</a>(); });</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;  }</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;};</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment">/// n-ary expressions.</span></div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;<span class="comment">/// @tparam T  The callable type of operation to apply to the arguments.</span></div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;<span class="comment">/// @tparam N  The arity of the expression (to be specified).</span></div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keywordtype">int</span> N&gt;</div><div class="line"><a name="l00168"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1NaryExpression.xhtml">  168</a></span>&#160;<span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">NaryExpression</a>;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment">/// Unary expression.</span></div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00172"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1NaryExpression_3_01T_00_011_01_4.xhtml">  172</a></span>&#160;<span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">NaryExpression</a>&lt;T, 1&gt; : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1ExpressionFormula.xhtml">ExpressionFormula</a>&lt;NaryExpression&lt;T, 1&gt;&gt; {</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="comment">  /// @param[in] expression  The single argument.</span></div><div class="line"><a name="l00175"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1NaryExpression_3_01T_00_011_01_4.xhtml#ab0109d54b32673e7c3d40daccca8ae4d">  175</a></span>&#160;<span class="comment"></span>  <span class="keyword">explicit</span> <a class="code" href="classscram_1_1mef_1_1NaryExpression_3_01T_00_011_01_4.xhtml#ab0109d54b32673e7c3d40daccca8ae4d">NaryExpression</a>(<a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* expression)</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;      : <a class="code" href="classscram_1_1mef_1_1ExpressionFormula.xhtml">ExpressionFormula</a>&lt;<a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">NaryExpression</a>&lt;T, 1&gt;&gt;({expression}),</div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;        expression_(*expression) {}</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;</div><div class="line"><a name="l00179"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1NaryExpression_3_01T_00_011_01_4.xhtml#aa1186d2e28f5a2515ed756d0babc016b">  179</a></span>&#160;  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1NaryExpression_3_01T_00_011_01_4.xhtml#aa1186d2e28f5a2515ed756d0babc016b">Validate</a>()<span class="keyword"> const override </span>{}</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;</div><div class="line"><a name="l00181"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1NaryExpression_3_01T_00_011_01_4.xhtml#a831605925282628dad83c4de7f18832a">  181</a></span>&#160;  <a class="code" href="expression_8h.xhtml#afc9530f5ba8d4c2ccf0b40c7422a44c0">Interval</a> <a class="code" href="classscram_1_1mef_1_1NaryExpression_3_01T_00_011_01_4.xhtml#a831605925282628dad83c4de7f18832a">interval</a>() noexcept<span class="keyword"> override </span>{</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <a class="code" href="expression_8h.xhtml#afc9530f5ba8d4c2ccf0b40c7422a44c0">Interval</a> arg_interval = expression_.interval();</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    <span class="keywordtype">double</span> max_value = T()(arg_interval.upper());</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="keywordtype">double</span> min_value = T()(arg_interval.lower());</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keyword">auto</span> min_max = std::minmax(max_value, min_value);</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <span class="keywordflow">return</span> Interval::closed(min_max.first, min_max.second);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;  }</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment">  /// Computes the expression value with a given argument value extractor.</span></div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> F&gt;</div><div class="line"><a name="l00191"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1NaryExpression_3_01T_00_011_01_4.xhtml#a2850aedf37ee8df0a48ba86c1733b6f1">  191</a></span>&#160;  <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1NaryExpression_3_01T_00_011_01_4.xhtml#a2850aedf37ee8df0a48ba86c1733b6f1">Compute</a>(F&amp;&amp; eval) noexcept {</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <span class="keywordflow">return</span> T()(eval(&amp;expression_));</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;  }</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;  <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>&amp; expression_;  <span class="comment">///&lt; The argument expression.</span></div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="comment">/// Binary expression.</span></div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00201"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1NaryExpression_3_01T_00_012_01_4.xhtml">  201</a></span>&#160;<span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">NaryExpression</a>&lt;T, 2&gt; : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1ExpressionFormula.xhtml">ExpressionFormula</a>&lt;NaryExpression&lt;T, 2&gt;&gt; {</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;<span class="comment">  /// Two expression argument constructor.</span></div><div class="line"><a name="l00204"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1NaryExpression_3_01T_00_012_01_4.xhtml#ad9ffaec390584add14a084bb1bf4fc89">  204</a></span>&#160;<span class="comment"></span>  <span class="keyword">explicit</span> <a class="code" href="classscram_1_1mef_1_1NaryExpression_3_01T_00_012_01_4.xhtml#ad9ffaec390584add14a084bb1bf4fc89">NaryExpression</a>(<a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* arg_one, <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* arg_two)</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;      : <a class="code" href="classscram_1_1mef_1_1ExpressionFormula.xhtml">ExpressionFormula</a>&lt;<a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">NaryExpression</a>&lt;T, 2&gt;&gt;({arg_one, arg_two}) {}</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div><div class="line"><a name="l00207"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1NaryExpression_3_01T_00_012_01_4.xhtml#add0d85eab628c5b03a1595d48253951f">  207</a></span>&#160;  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1NaryExpression_3_01T_00_012_01_4.xhtml#add0d85eab628c5b03a1595d48253951f">Validate</a>()<span class="keyword"> const override </span>{}</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div><div class="line"><a name="l00209"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1NaryExpression_3_01T_00_012_01_4.xhtml#a559345ae6b65f649a2a2fa5c8d7fcb35">  209</a></span>&#160;  <a class="code" href="expression_8h.xhtml#afc9530f5ba8d4c2ccf0b40c7422a44c0">Interval</a> <a class="code" href="classscram_1_1mef_1_1NaryExpression_3_01T_00_012_01_4.xhtml#a559345ae6b65f649a2a2fa5c8d7fcb35">interval</a>() noexcept<span class="keyword"> override </span>{</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <a class="code" href="expression_8h.xhtml#afc9530f5ba8d4c2ccf0b40c7422a44c0">Interval</a> interval_one = <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac22fdb9ced7ef6942f666337b6a34110">Expression::args</a>().front()-&gt;interval();</div><div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <a class="code" href="expression_8h.xhtml#afc9530f5ba8d4c2ccf0b40c7422a44c0">Interval</a> interval_two = <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac22fdb9ced7ef6942f666337b6a34110">Expression::args</a>().back()-&gt;interval();</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="keywordtype">double</span> max_max = T()(interval_one.upper(), interval_two.upper());</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keywordtype">double</span> max_min = T()(interval_one.upper(), interval_two.lower());</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    <span class="keywordtype">double</span> min_max = T()(interval_one.lower(), interval_two.upper());</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keywordtype">double</span> min_min = T()(interval_one.lower(), interval_two.lower());</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="keyword">auto</span> interval_pair = std::minmax({max_max, max_min, min_max, min_min});</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <span class="keywordflow">return</span> Interval::closed(interval_pair.first, interval_pair.second);</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;  }</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;<span class="comment">  /// Computes the expression value with a given argument value extractor.</span></div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> F&gt;</div><div class="line"><a name="l00222"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1NaryExpression_3_01T_00_012_01_4.xhtml#abb547de88b721a2ac2f8773c03bd5176">  222</a></span>&#160;  <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1NaryExpression_3_01T_00_012_01_4.xhtml#abb547de88b721a2ac2f8773c03bd5176">Compute</a>(F&amp;&amp; eval) noexcept {</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="keywordflow">return</span> T()(eval(<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac22fdb9ced7ef6942f666337b6a34110">Expression::args</a>().front()),</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;               eval(<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac22fdb9ced7ef6942f666337b6a34110">Expression::args</a>().back()));</div><div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;  }</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;};</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;<span class="comment">/// Multivariate expression.</span></div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00230"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1NaryExpression_3_01T_00-1_01_4.xhtml">  230</a></span>&#160;<span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">NaryExpression</a>&lt;T, -1&gt; : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1ExpressionFormula.xhtml">ExpressionFormula</a>&lt;NaryExpression&lt;T, -1&gt;&gt; {</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="comment">  /// Checks the number of provided arguments upon initialization.</span></div><div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;<span class="comment">  /// @param[in] args  Arguments of this expression.</span></div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="comment">  /// @throws InvalidArgument  The number of arguments is fewer than 2.</span></div><div class="line"><a name="l00237"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1NaryExpression_3_01T_00-1_01_4.xhtml#adb8d79a4cee720e7f0c153ed2335ec2c">  237</a></span>&#160;<span class="comment"></span>  <span class="keyword">explicit</span> <a class="code" href="classscram_1_1mef_1_1NaryExpression_3_01T_00-1_01_4.xhtml#adb8d79a4cee720e7f0c153ed2335ec2c">NaryExpression</a>(std::vector&lt;Expression*&gt; <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac22fdb9ced7ef6942f666337b6a34110">args</a>)</div><div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;      : <a class="code" href="classscram_1_1mef_1_1ExpressionFormula.xhtml">ExpressionFormula</a>&lt;<a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">NaryExpression</a>&lt;T, -1&gt;&gt;(std::move(args)) {</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    <span class="keywordflow">if</span> (<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac22fdb9ced7ef6942f666337b6a34110">Expression::args</a>().size() &lt; 2)</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;      <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1InvalidArgument.xhtml">InvalidArgument</a>(<span class="stringliteral">&quot;Expression requires 2 or more arguments.&quot;</span>);</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;  }</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div><div class="line"><a name="l00243"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1NaryExpression_3_01T_00-1_01_4.xhtml#a4d17378486e966c4d432f0c0483ba80d">  243</a></span>&#160;  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1NaryExpression_3_01T_00-1_01_4.xhtml#a4d17378486e966c4d432f0c0483ba80d">Validate</a>()<span class="keyword"> const override </span>{}</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div><div class="line"><a name="l00245"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1NaryExpression_3_01T_00-1_01_4.xhtml#a1d2f6e2308ab6f24ce53103d7460b80e">  245</a></span>&#160;  <a class="code" href="expression_8h.xhtml#afc9530f5ba8d4c2ccf0b40c7422a44c0">Interval</a> <a class="code" href="classscram_1_1mef_1_1NaryExpression_3_01T_00-1_01_4.xhtml#a1d2f6e2308ab6f24ce53103d7460b80e">interval</a>() noexcept<span class="keyword"> override </span>{</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <span class="keyword">auto</span> it = <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac22fdb9ced7ef6942f666337b6a34110">Expression::args</a>().begin();</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    <a class="code" href="expression_8h.xhtml#afc9530f5ba8d4c2ccf0b40c7422a44c0">Interval</a> first_arg_interval = (*it)-&gt;interval();</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    <span class="keywordtype">double</span> max_value = first_arg_interval.upper();</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keywordtype">double</span> min_value = first_arg_interval.lower();</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    <span class="keywordflow">for</span> (++it; it != <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac22fdb9ced7ef6942f666337b6a34110">Expression::args</a>().end(); ++it) {</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;      <a class="code" href="expression_8h.xhtml#afc9530f5ba8d4c2ccf0b40c7422a44c0">Interval</a> next_arg_interval = (*it)-&gt;interval();</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;      <span class="keywordtype">double</span> arg_max = next_arg_interval.upper();</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;      <span class="keywordtype">double</span> arg_min = next_arg_interval.lower();</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;      <span class="keywordtype">double</span> max_max = T()(max_value, arg_max);</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;      <span class="keywordtype">double</span> max_min = T()(max_value, arg_min);</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;      <span class="keywordtype">double</span> min_max = T()(min_value, arg_max);</div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;      <span class="keywordtype">double</span> min_min = T()(min_value, arg_min);</div><div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;      std::tie(min_value, max_value) =</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;          std::minmax({max_max, max_min, min_max, min_min});</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    }</div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    assert(min_value &lt;= max_value);</div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="keywordflow">return</span> Interval::closed(min_value, max_value);</div><div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;  }</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;<span class="comment">  /// Computes the expression value with a given argument value extractor.</span></div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;<span class="comment"></span>  <span class="keyword">template</span> &lt;<span class="keyword">typename</span> F&gt;</div><div class="line"><a name="l00267"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1NaryExpression_3_01T_00-1_01_4.xhtml#aad5811e7fc2298aaf486697e050774fa">  267</a></span>&#160;  <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1NaryExpression_3_01T_00-1_01_4.xhtml#aad5811e7fc2298aaf486697e050774fa">Compute</a>(F&amp;&amp; eval) noexcept {</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;    <span class="keyword">auto</span> it = <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac22fdb9ced7ef6942f666337b6a34110">Expression::args</a>().begin();</div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    <span class="keywordtype">double</span> result = eval(*it);</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    <span class="keywordflow">for</span> (++it; it != <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac22fdb9ced7ef6942f666337b6a34110">Expression::args</a>().end(); ++it) {</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;      result = T()(result, eval(*it));</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    }</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;    <span class="keywordflow">return</span> result;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;  }</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;};</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;<span class="comment">/// Ensures that expression can be used for probability ([0, 1]).</span></div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="comment">/// @tparam T  The exception type to throw for invalid probability values.</span></div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;<span class="comment">/// @param[in] expression  The expression to be validated.</span></div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;<span class="comment">/// @param[in] description  The addition information for error messages.</span></div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="comment">/// @param[in] type  The type of probability or fraction for error messages.</span></div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="comment">/// @throws T  The expression is not suited for probability.</span></div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00287"></a><span class="lineno"><a class="line" href="expression_8h.xhtml#a958c404b31cdb929075b67827e31f4de">  287</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="expression_8h.xhtml#a958c404b31cdb929075b67827e31f4de">EnsureProbability</a>(<a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* expression, <span class="keyword">const</span> std::string&amp; description,</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;                       <span class="keyword">const</span> <span class="keywordtype">char</span>* type = <span class="stringliteral">&quot;probability&quot;</span>) {</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;  <span class="keywordtype">double</span> <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#af4c1a5cb29e8f45623a99742b7ba8bc5">value</a> = expression-&gt;<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#af4c1a5cb29e8f45623a99742b7ba8bc5">value</a>();</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;  <span class="keywordflow">if</span> (value &lt; 0 || value &gt; 1)</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;    <span class="keywordflow">throw</span> T(<span class="stringliteral">&quot;Invalid &quot;</span> + std::string(type) + <span class="stringliteral">&quot; value for &quot;</span> + description);</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;  <span class="keywordflow">if</span> (<a class="code" href="expression_8h.xhtml#a7b3a2de3be05128d51eaa76c01de99f6">IsProbability</a>(expression-&gt;<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a179b21e75df522673e6d51b784d10e86">interval</a>()) == <span class="keyword">false</span>)</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <span class="keywordflow">throw</span> T(<span class="stringliteral">&quot;Invalid &quot;</span> + std::string(type) + <span class="stringliteral">&quot; sample domain for &quot;</span> +</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;            description);</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;}</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="comment">/// Ensures that expression yields positive (&gt; 0) values.</span></div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;<span class="comment">/// @tparam T  The exception type to throw for invalid values.</span></div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="comment">/// @param[in] expression  The expression to be validated.</span></div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="comment">/// @param[in] description  The addition information for error messages.</span></div><div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<span class="comment">/// @throws T  The expression is not suited for positive values.</span></div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00306"></a><span class="lineno"><a class="line" href="expression_8h.xhtml#a051e7ad7c13edf0451ea5db7caf17729">  306</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="expression_8h.xhtml#a051e7ad7c13edf0451ea5db7caf17729">EnsurePositive</a>(<a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* expression, <span class="keyword">const</span> std::string&amp; description) {</div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;  <span class="keywordflow">if</span> (expression-&gt;<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#af4c1a5cb29e8f45623a99742b7ba8bc5">value</a>() &lt;= 0)</div><div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    <span class="keywordflow">throw</span> T(description + <span class="stringliteral">&quot; argument value must be positive.&quot;</span>);</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;  <span class="keywordflow">if</span> (<a class="code" href="expression_8h.xhtml#a4962ab79380de2b807438620d16a098e">IsPositive</a>(expression-&gt;<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a179b21e75df522673e6d51b784d10e86">interval</a>()) == <span class="keyword">false</span>)</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    <span class="keywordflow">throw</span> T(description + <span class="stringliteral">&quot; argument sample domain must be positive.&quot;</span>);</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;}</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="comment">/// Ensures that expression yields non-negative (&gt;= 0) values.</span></div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="comment">/// @tparam T  The exception type to throw for invalid values.</span></div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="comment">/// @param[in] expression  The expression to be validated.</span></div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="comment">/// @param[in] description  The addition information for error messages.</span></div><div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;<span class="comment">/// @throws T  The expression is not suited for non-negative values.</span></div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00322"></a><span class="lineno"><a class="line" href="expression_8h.xhtml#aee12bbf581047eae146d411cef0585b9">  322</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="expression_8h.xhtml#aee12bbf581047eae146d411cef0585b9">EnsureNonNegative</a>(<a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* expression, <span class="keyword">const</span> std::string&amp; description) {</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;  <span class="keywordflow">if</span> (expression-&gt;<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#af4c1a5cb29e8f45623a99742b7ba8bc5">value</a>() &lt; 0)</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    <span class="keywordflow">throw</span> T(description + <span class="stringliteral">&quot; argument value cannot be negative.&quot;</span>);</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;  <span class="keywordflow">if</span> (<a class="code" href="expression_8h.xhtml#a5682dd6fbc6d7dd33ebf8b5665006b99">IsNonNegative</a>(expression-&gt;<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a179b21e75df522673e6d51b784d10e86">interval</a>()) == <span class="keyword">false</span>)</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    <span class="keywordflow">throw</span> T(description + <span class="stringliteral">&quot; argument sample cannot have negative values.&quot;</span>);</div><div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;}</div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="comment">/// Ensures that expression values are within the interval.</span></div><div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;<span class="comment">/// @tparam T  The exception type to throw for invalid values.</span></div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="comment">/// @param[in] expression  The expression to be validated.</span></div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="comment">/// @param[in] interval  The allowed interval.</span></div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="comment">/// @param[in] type  The type of expression for error messages.</span></div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<span class="comment">///</span></div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<span class="comment">/// @throws T  The expression is not suited for non-negative values.</span></div><div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00339"></a><span class="lineno"><a class="line" href="expression_8h.xhtml#acfed368a4876558582c7b15a0af3330e">  339</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="expression_8h.xhtml#acfed368a4876558582c7b15a0af3330e">EnsureWithin</a>(<a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* expression, <span class="keyword">const</span> <a class="code" href="expression_8h.xhtml#afc9530f5ba8d4c2ccf0b40c7422a44c0">Interval</a>&amp; <a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a179b21e75df522673e6d51b784d10e86">interval</a>,</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;                  <span class="keyword">const</span> <span class="keywordtype">char</span>* type) {</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;  <span class="keywordtype">double</span> arg_value = expression-&gt;<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#af4c1a5cb29e8f45623a99742b7ba8bc5">value</a>();</div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;  <span class="keywordflow">if</span> (!<a class="code" href="expression_8h.xhtml#a3876b976ae2dd7f37465f916315829a1">Contains</a>(interval, arg_value)) {</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    std::stringstream ss;</div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;    ss &lt;&lt; type &lt;&lt; <span class="stringliteral">&quot; argument value [&quot;</span> &lt;&lt; arg_value &lt;&lt; <span class="stringliteral">&quot;] must be in &quot;</span></div><div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;       &lt;&lt; interval &lt;&lt; <span class="stringliteral">&quot;.&quot;</span>;</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;    <span class="keywordflow">throw</span> T(ss.str());</div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;  }</div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;  <a class="code" href="expression_8h.xhtml#afc9530f5ba8d4c2ccf0b40c7422a44c0">Interval</a> arg_interval = expression-&gt;<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#a179b21e75df522673e6d51b784d10e86">interval</a>();</div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;  <span class="keywordflow">if</span> (!boost::icl::within(arg_interval, interval)) {</div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;    std::stringstream ss;</div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;    ss &lt;&lt; type &lt;&lt; <span class="stringliteral">&quot; argument sample domain &quot;</span> &lt;&lt; arg_interval &lt;&lt; <span class="stringliteral">&quot; must be in &quot;</span></div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;       &lt;&lt; interval &lt;&lt; <span class="stringliteral">&quot;.&quot;</span>;</div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;    <span class="keywordflow">throw</span> T(ss.str());</div><div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;  }</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;}</div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;</div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;}  <span class="comment">// namespace mef</span></div><div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;}  <span class="comment">// namespace scram</span></div><div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;</div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;<span class="preprocessor">#endif  // SCRAM_SRC_EXPRESSION_H_</span></div><div class="ttc" id="expression_8h_xhtml_afc9530f5ba8d4c2ccf0b40c7422a44c0"><div class="ttname"><a href="expression_8h.xhtml#afc9530f5ba8d4c2ccf0b40c7422a44c0">scram::mef::Interval</a></div><div class="ttdeci">boost::icl::continuous_interval&lt; double &gt; Interval</div><div class="ttdoc">Validation domain interval for expression values. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00041">expression.h:41</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_af3e09d926b52f6077aa85c26454c4e18"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#af3e09d926b52f6077aa85c26454c4e18">scram::mef::Expression::Validate</a></div><div class="ttdeci">virtual void Validate() const </div><div class="ttdoc">Validates the expression. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00090">expression.h:90</a></div></div>
<div class="ttc" id="expression_8h_xhtml_a3876b976ae2dd7f37465f916315829a1"><div class="ttname"><a href="expression_8h.xhtml#a3876b976ae2dd7f37465f916315829a1">scram::mef::Contains</a></div><div class="ttdeci">bool Contains(const Interval &amp;interval, double value)</div><div class="ttdoc">Returns true if a given interval contains a given value. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00047">expression.h:47</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NaryExpression_3_01T_00-1_01_4_xhtml_a1d2f6e2308ab6f24ce53103d7460b80e"><div class="ttname"><a href="classscram_1_1mef_1_1NaryExpression_3_01T_00-1_01_4.xhtml#a1d2f6e2308ab6f24ce53103d7460b80e">scram::mef::NaryExpression&lt; T,-1 &gt;::interval</a></div><div class="ttdeci">Interval interval() noexceptoverride</div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00245">expression.h:245</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_ab6d31c4ddb5d4a827727829cbd4e4449"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#ab6d31c4ddb5d4a827727829cbd4e4449">scram::mef::Expression::Reset</a></div><div class="ttdeci">void Reset() noexcept</div><div class="ttdoc">This routine resets the sampling to get new values. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8cc_source.xhtml#l00041">expression.cc:41</a></div></div>
<div class="ttc" id="error_8h_xhtml"><div class="ttname"><a href="error_8h.xhtml">error.h</a></div><div class="ttdoc">Exceptions for SCRAM. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1NaryExpression_3_01T_00_011_01_4_xhtml_a831605925282628dad83c4de7f18832a"><div class="ttname"><a href="classscram_1_1mef_1_1NaryExpression_3_01T_00_011_01_4.xhtml#a831605925282628dad83c4de7f18832a">scram::mef::NaryExpression&lt; T, 1 &gt;::interval</a></div><div class="ttdeci">Interval interval() noexceptoverride</div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00181">expression.h:181</a></div></div>
<div class="ttc" id="element_8h_xhtml"><div class="ttname"><a href="element_8h.xhtml">element.h</a></div><div class="ttdoc">Helper classes, structs, and properties common to all other classes. </div></div>
<div class="ttc" id="expression_8h_xhtml_a051e7ad7c13edf0451ea5db7caf17729"><div class="ttname"><a href="expression_8h.xhtml#a051e7ad7c13edf0451ea5db7caf17729">scram::mef::EnsurePositive</a></div><div class="ttdeci">void EnsurePositive(Expression *expression, const std::string &amp;description)</div><div class="ttdoc">Ensures that expression yields positive (&gt; 0) values. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00306">expression.h:306</a></div></div>
<div class="ttc" id="expression_8h_xhtml_a4962ab79380de2b807438620d16a098e"><div class="ttname"><a href="expression_8h.xhtml#a4962ab79380de2b807438620d16a098e">scram::mef::IsPositive</a></div><div class="ttdeci">bool IsPositive(const Interval &amp;interval)</div><div class="ttdoc">Checks if all values in a given interval are positive. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00062">expression.h:62</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NaryExpression_3_01T_00_012_01_4_xhtml_a559345ae6b65f649a2a2fa5c8d7fcb35"><div class="ttname"><a href="classscram_1_1mef_1_1NaryExpression_3_01T_00_012_01_4.xhtml#a559345ae6b65f649a2a2fa5c8d7fcb35">scram::mef::NaryExpression&lt; T, 2 &gt;::interval</a></div><div class="ttdeci">Interval interval() noexceptoverride</div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00209">expression.h:209</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_ac22fdb9ced7ef6942f666337b6a34110"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#ac22fdb9ced7ef6942f666337b6a34110">scram::mef::Expression::args</a></div><div class="ttdeci">const std::vector&lt; Expression * &gt; &amp; args() const </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00084">expression.h:84</a></div></div>
<div class="ttc" id="expression_8h_xhtml_a958c404b31cdb929075b67827e31f4de"><div class="ttname"><a href="expression_8h.xhtml#a958c404b31cdb929075b67827e31f4de">scram::mef::EnsureProbability</a></div><div class="ttdeci">void EnsureProbability(Expression *expression, const std::string &amp;description, const char *type=&quot;probability&quot;)</div><div class="ttdoc">Ensures that expression can be used for probability ([0, 1]). </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00287">expression.h:287</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NaryExpression_3_01T_00_012_01_4_xhtml_ad9ffaec390584add14a084bb1bf4fc89"><div class="ttname"><a href="classscram_1_1mef_1_1NaryExpression_3_01T_00_012_01_4.xhtml#ad9ffaec390584add14a084bb1bf4fc89">scram::mef::NaryExpression&lt; T, 2 &gt;::NaryExpression</a></div><div class="ttdeci">NaryExpression(Expression *arg_one, Expression *arg_two)</div><div class="ttdoc">Two expression argument constructor. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00204">expression.h:204</a></div></div>
<div class="ttc" id="expression_8h_xhtml_ac6e99f00ddefbc8b1ae808138c088b19"><div class="ttname"><a href="expression_8h.xhtml#ac6e99f00ddefbc8b1ae808138c088b19">scram::mef::IntervalBounds</a></div><div class="ttdeci">boost::icl::interval_bounds IntervalBounds</div><div class="ttdoc">left_open, open, right_open, closed bounds. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00044">expression.h:44</a></div></div>
<div class="ttc" id="expression_8h_xhtml_a7b3a2de3be05128d51eaa76c01de99f6"><div class="ttname"><a href="expression_8h.xhtml#a7b3a2de3be05128d51eaa76c01de99f6">scram::mef::IsProbability</a></div><div class="ttdeci">bool IsProbability(const Interval &amp;interval)</div><div class="ttdoc">Checks if a given interval is within the probability domain. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00052">expression.h:52</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_a179b21e75df522673e6d51b784d10e86"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#a179b21e75df522673e6d51b784d10e86">scram::mef::Expression::interval</a></div><div class="ttdeci">virtual Interval interval() noexcept</div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00096">expression.h:96</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1ExpressionFormula_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1ExpressionFormula.xhtml">scram::mef::ExpressionFormula</a></div><div class="ttdoc">CRTP for Expressions with the same formula to evaluate and sample. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00145">expression.h:145</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_a058aef65da884a47ea3345bc31488b7a"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#a058aef65da884a47ea3345bc31488b7a">scram::mef::Expression::IsDeviate</a></div><div class="ttdeci">virtual bool IsDeviate() noexcept</div><div class="ttdoc">Determines if the value of the expression contains deviate expressions. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8cc_source.xhtml#l00049">expression.cc:49</a></div></div>
<div class="ttc" id="namespacescram_xhtml"><div class="ttname"><a href="namespacescram.xhtml">scram</a></div><div class="ttdef"><b>Definition:</b> <a href="analysis_8cc_source.xhtml#l00023">analysis.cc:23</a></div></div>
<div class="ttc" id="expression_8h_xhtml_a5682dd6fbc6d7dd33ebf8b5665006b99"><div class="ttname"><a href="expression_8h.xhtml#a5682dd6fbc6d7dd33ebf8b5665006b99">scram::mef::IsNonNegative</a></div><div class="ttdeci">bool IsNonNegative(const Interval &amp;interval)</div><div class="ttdoc">Checks if all values in a given interval are non-negative. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00057">expression.h:57</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NaryExpression_3_01T_00_012_01_4_xhtml_add0d85eab628c5b03a1595d48253951f"><div class="ttname"><a href="classscram_1_1mef_1_1NaryExpression_3_01T_00_012_01_4.xhtml#add0d85eab628c5b03a1595d48253951f">scram::mef::NaryExpression&lt; T, 2 &gt;::Validate</a></div><div class="ttdeci">void Validate() const override</div><div class="ttdoc">Validates the expression. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00207">expression.h:207</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NaryExpression_3_01T_00_011_01_4_xhtml_ab0109d54b32673e7c3d40daccca8ae4d"><div class="ttname"><a href="classscram_1_1mef_1_1NaryExpression_3_01T_00_011_01_4.xhtml#ab0109d54b32673e7c3d40daccca8ae4d">scram::mef::NaryExpression&lt; T, 1 &gt;::NaryExpression</a></div><div class="ttdeci">NaryExpression(Expression *expression)</div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00175">expression.h:175</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NaryExpression_3_01T_00_011_01_4_xhtml_aa1186d2e28f5a2515ed756d0babc016b"><div class="ttname"><a href="classscram_1_1mef_1_1NaryExpression_3_01T_00_011_01_4.xhtml#aa1186d2e28f5a2515ed756d0babc016b">scram::mef::NaryExpression&lt; T, 1 &gt;::Validate</a></div><div class="ttdeci">void Validate() const override</div><div class="ttdoc">Validates the expression. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00179">expression.h:179</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_a1700295154b8db507896804ad4307c14"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#a1700295154b8db507896804ad4307c14">scram::mef::Expression::Expression</a></div><div class="ttdeci">Expression(std::vector&lt; Expression * &gt; args={})</div><div class="ttdoc">Constructor for use by derived classes to register their arguments. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8cc_source.xhtml#l00028">expression.cc:28</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NaryExpression_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1NaryExpression.xhtml">scram::mef::NaryExpression</a></div><div class="ttdoc">n-ary expressions. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00168">expression.h:168</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NaryExpression_3_01T_00_012_01_4_xhtml_abb547de88b721a2ac2f8773c03bd5176"><div class="ttname"><a href="classscram_1_1mef_1_1NaryExpression_3_01T_00_012_01_4.xhtml#abb547de88b721a2ac2f8773c03bd5176">scram::mef::NaryExpression&lt; T, 2 &gt;::Compute</a></div><div class="ttdeci">double Compute(F &amp;&amp;eval) noexcept</div><div class="ttdoc">Computes the expression value with a given argument value extractor. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00222">expression.h:222</a></div></div>
<div class="ttc" id="expression_8h_xhtml_acfed368a4876558582c7b15a0af3330e"><div class="ttname"><a href="expression_8h.xhtml#acfed368a4876558582c7b15a0af3330e">scram::mef::EnsureWithin</a></div><div class="ttdeci">void EnsureWithin(Expression *expression, const Interval &amp;interval, const char *type)</div><div class="ttdoc">Ensures that expression values are within the interval. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00339">expression.h:339</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1ExpressionFormula_xhtml_a1f7c71744d679ab1a4e5ca3ca98277a6"><div class="ttname"><a href="classscram_1_1mef_1_1ExpressionFormula.xhtml#a1f7c71744d679ab1a4e5ca3ca98277a6">scram::mef::ExpressionFormula::value</a></div><div class="ttdeci">double value() noexceptfinal</div><div class="ttdoc">Computes the expression with argument expression default values. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00150">expression.h:150</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NaryExpression_3_01T_00-1_01_4_xhtml_a4d17378486e966c4d432f0c0483ba80d"><div class="ttname"><a href="classscram_1_1mef_1_1NaryExpression_3_01T_00-1_01_4.xhtml#a4d17378486e966c4d432f0c0483ba80d">scram::mef::NaryExpression&lt; T,-1 &gt;::Validate</a></div><div class="ttdeci">void Validate() const override</div><div class="ttdoc">Validates the expression. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00243">expression.h:243</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_af4c1a5cb29e8f45623a99742b7ba8bc5"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#af4c1a5cb29e8f45623a99742b7ba8bc5">scram::mef::Expression::value</a></div><div class="ttdeci">virtual double value() noexcept=0</div></div>
<div class="ttc" id="classscram_1_1mef_1_1NaryExpression_3_01T_00-1_01_4_xhtml_aad5811e7fc2298aaf486697e050774fa"><div class="ttname"><a href="classscram_1_1mef_1_1NaryExpression_3_01T_00-1_01_4.xhtml#aad5811e7fc2298aaf486697e050774fa">scram::mef::NaryExpression&lt; T,-1 &gt;::Compute</a></div><div class="ttdeci">double Compute(F &amp;&amp;eval) noexcept</div><div class="ttdoc">Computes the expression value with a given argument value extractor. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00267">expression.h:267</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_ac636368fbb89921e75d120d5ac154ac1"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#ac636368fbb89921e75d120d5ac154ac1">scram::mef::Expression::AddArg</a></div><div class="ttdeci">void AddArg(Expression *arg)</div><div class="ttdoc">Registers an additional argument expression. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00127">expression.h:127</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NaryExpression_3_01T_00_011_01_4_xhtml_a2850aedf37ee8df0a48ba86c1733b6f1"><div class="ttname"><a href="classscram_1_1mef_1_1NaryExpression_3_01T_00_011_01_4.xhtml#a2850aedf37ee8df0a48ba86c1733b6f1">scram::mef::NaryExpression&lt; T, 1 &gt;::Compute</a></div><div class="ttdeci">double Compute(F &amp;&amp;eval) noexcept</div><div class="ttdoc">Computes the expression value with a given argument value extractor. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00191">expression.h:191</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_a5cf00d8b2ff843ad029a501a89ee572a"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#a5cf00d8b2ff843ad029a501a89ee572a">scram::mef::Expression::Sample</a></div><div class="ttdeci">double Sample() noexcept</div><div class="ttdef"><b>Definition:</b> <a href="expression_8cc_source.xhtml#l00033">expression.cc:33</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml">scram::mef::Expression</a></div><div class="ttdoc">Abstract base class for all sorts of expressions to describe events. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00073">expression.h:73</a></div></div>
<div class="ttc" id="structscram_1_1InvalidArgument_xhtml"><div class="ttname"><a href="structscram_1_1InvalidArgument.xhtml">scram::InvalidArgument</a></div><div class="ttdoc">This error class can be used to indicate unacceptable arguments. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00100">error.h:100</a></div></div>
<div class="ttc" id="expression_8h_xhtml_aee12bbf581047eae146d411cef0585b9"><div class="ttname"><a href="expression_8h.xhtml#aee12bbf581047eae146d411cef0585b9">scram::mef::EnsureNonNegative</a></div><div class="ttdeci">void EnsureNonNegative(Expression *expression, const std::string &amp;description)</div><div class="ttdoc">Ensures that expression yields non-negative (&gt;= 0) values. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00322">expression.h:322</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NaryExpression_3_01T_00-1_01_4_xhtml_adb8d79a4cee720e7f0c153ed2335ec2c"><div class="ttname"><a href="classscram_1_1mef_1_1NaryExpression_3_01T_00-1_01_4.xhtml#adb8d79a4cee720e7f0c153ed2335ec2c">scram::mef::NaryExpression&lt; T,-1 &gt;::NaryExpression</a></div><div class="ttdeci">NaryExpression(std::vector&lt; Expression * &gt; args)</div><div class="ttdoc">Checks the number of provided arguments upon initialization. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00237">expression.h:237</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Tue Aug 1 2017 02:15:58 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
