<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>event_tree.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">event_tree.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="event__tree_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2017 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file event_tree.h</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">/// Event Tree facilities.</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor">#ifndef SCRAM_SRC_EVENT_TREE_H_</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#define SCRAM_SRC_EVENT_TREE_H_</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;memory&gt;</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &lt;boost/noncopyable.hpp&gt;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &lt;boost/variant.hpp&gt;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="element_8h.xhtml">element.h</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="event_8h.xhtml">event.h</a>&quot;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="expression_8h.xhtml">expression.h</a>&quot;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="variant_8h.xhtml">ext/variant.h</a>&quot;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram.xhtml">scram</a> {</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="keyword">namespace </span>mef {</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="keyword">class </span>InstructionVisitor;</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">/// Instructions and rules for event tree paths.</span></div><div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Instruction.xhtml">   42</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Instruction.xhtml">Instruction</a> : <span class="keyword">private</span> boost::noncopyable {</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160; <span class="keyword">public</span>:</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;  <span class="keyword">virtual</span> ~<a class="code" href="classscram_1_1mef_1_1Instruction.xhtml">Instruction</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">  /// Applies the visitor to the object.</span></div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment"></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Instruction.xhtml#a64ff8a04a3cce0febdf9fce4cc25d19a">Accept</a>(<a class="code" href="classscram_1_1mef_1_1InstructionVisitor.xhtml">InstructionVisitor</a>* visitor) <span class="keyword">const</span> = 0;</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;};</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">/// Default visit for instruction type of T.</span></div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment"></span><span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00052"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Visitable.xhtml">   52</a></span>&#160;<span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Visitable.xhtml">Visitable</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Instruction.xhtml">Instruction</a> {</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment">  /// Calls visit with the object pointer T*.</span></div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Instruction.xhtml#a64ff8a04a3cce0febdf9fce4cc25d19a">Accept</a>(<a class="code" href="classscram_1_1mef_1_1InstructionVisitor.xhtml">InstructionVisitor</a>* visitor) <span class="keyword">const</span> <span class="keyword">final</span>;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;};</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">/// The operation to change house-events.</span></div><div class="line"><a name="l00059"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1SetHouseEvent.xhtml">   59</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1SetHouseEvent.xhtml">SetHouseEvent</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Visitable.xhtml">Visitable</a>&lt;SetHouseEvent&gt; {</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">  /// @param[in] name  Non-empty public house-event name.</span></div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment">  /// @param[in] state  The new state for the given house-event.</span></div><div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1SetHouseEvent.xhtml#aece4a88079685cfe53968c770214ba88">   63</a></span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1SetHouseEvent.xhtml#aece4a88079685cfe53968c770214ba88">SetHouseEvent</a>(std::string name, <span class="keywordtype">bool</span> state)</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;      : name_(std::move(name)), state_(state) {}</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">  /// @returns The name of the house-event to apply this instruction.</span></div><div class="line"><a name="l00067"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1SetHouseEvent.xhtml#a78d78cbf5e26fadf3efda96fbe5cb066">   67</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> std::string&amp; <a class="code" href="classscram_1_1mef_1_1SetHouseEvent.xhtml#a78d78cbf5e26fadf3efda96fbe5cb066">name</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> name_; }</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">  /// @returns The state of the target house-event to be changed into.</span></div><div class="line"><a name="l00070"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1SetHouseEvent.xhtml#a4d7470e83d76df47f6d7e3febb2ae1d1">   70</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> <a class="code" href="classscram_1_1mef_1_1SetHouseEvent.xhtml#a4d7470e83d76df47f6d7e3febb2ae1d1">state</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> state_; }</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;  std::string name_;  <span class="comment">///&lt; The public name of the house event.</span></div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment"></span>  <span class="keywordtype">bool</span> state_;  <span class="comment">///&lt; The state for the house event.</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">/// The operation of collecting expressions for event tree sequences.</span></div><div class="line"><a name="l00078"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1CollectExpression.xhtml">   78</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1CollectExpression.xhtml">CollectExpression</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Visitable.xhtml">Visitable</a>&lt;CollectExpression&gt; {</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">  /// @param[in] expression  The expression to multiply</span></div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">  ///                        the current sequence probability.</span></div><div class="line"><a name="l00082"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1CollectExpression.xhtml#a37104b2f6774ce92968bec66a7c1facc">   82</a></span>&#160;<span class="comment"></span>  <span class="keyword">explicit</span> <a class="code" href="classscram_1_1mef_1_1CollectExpression.xhtml#a37104b2f6774ce92968bec66a7c1facc">CollectExpression</a>(<a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* expression)</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;      : expression_(expression) {}</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment">  /// @returns The collected expression for value extraction.</span></div><div class="line"><a name="l00086"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1CollectExpression.xhtml#a0be8ace1305ed498fca212a3b1a6938f">   86</a></span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>&amp; <a class="code" href="classscram_1_1mef_1_1CollectExpression.xhtml#a0be8ace1305ed498fca212a3b1a6938f">expression</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> *expression_; }</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;  <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* expression_;  <span class="comment">///&lt; The probability expression to multiply.</span></div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment">/// The operation of connecting fault tree events into the event tree.</span></div><div class="line"><a name="l00093"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1CollectFormula.xhtml">   93</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1CollectFormula.xhtml">CollectFormula</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Visitable.xhtml">Visitable</a>&lt;CollectFormula&gt; {</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">  /// @param[in] formula  The valid formula to add into the sequence fault tree.</span></div><div class="line"><a name="l00096"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1CollectFormula.xhtml#a891f3de164fce7f15d0ad53dab1e95fd">   96</a></span>&#160;<span class="comment"></span>  <span class="keyword">explicit</span> <a class="code" href="classscram_1_1mef_1_1CollectFormula.xhtml#a891f3de164fce7f15d0ad53dab1e95fd">CollectFormula</a>(<a class="code" href="event_8h.xhtml#ac2fb708d25c3bde3eadbcf12d0bfee02">FormulaPtr</a> formula) : formula_(std::move(formula)) {}</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment">  /// @returns The formula to include into the current product of the path.</span></div><div class="line"><a name="l00099"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1CollectFormula.xhtml#a56a3cfe8798a0ed58a33d9a0b40d729c">   99</a></span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1Formula.xhtml">Formula</a>&amp; <a class="code" href="classscram_1_1mef_1_1CollectFormula.xhtml#a56a3cfe8798a0ed58a33d9a0b40d729c">formula</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> *formula_; }</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;  <a class="code" href="event_8h.xhtml#ac2fb708d25c3bde3eadbcf12d0bfee02">FormulaPtr</a> formula_;  <span class="comment">///&lt; The valid single formula for the collection.</span></div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">/// Conditional application of instructions.</span></div><div class="line"><a name="l00106"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1IfThenElse.xhtml">  106</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1IfThenElse.xhtml">IfThenElse</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Visitable.xhtml">Visitable</a>&lt;IfThenElse&gt; {</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">  /// @param[in] expression  The expression to evaluate for truth.</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">  /// @param[in] then_instruction  The required instruction to execute.</span></div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;<span class="comment">  /// @param[in] else_instruction  An optional instruction for the false case.</span></div><div class="line"><a name="l00111"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1IfThenElse.xhtml#aab13d860d45d741cac43ccb2192a0072">  111</a></span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1IfThenElse.xhtml#aab13d860d45d741cac43ccb2192a0072">IfThenElse</a>(<a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* expression, <a class="code" href="classscram_1_1mef_1_1Instruction.xhtml">Instruction</a>* then_instruction,</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;             <a class="code" href="classscram_1_1mef_1_1Instruction.xhtml">Instruction</a>* else_instruction = <span class="keyword">nullptr</span>)</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;      : expression_(expression),</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;        then_instruction_(std::move(then_instruction)),</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;        else_instruction_(std::move(else_instruction)) {}</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="comment">  /// @returns The conditional expression of the ternary instruction.</span></div><div class="line"><a name="l00118"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1IfThenElse.xhtml#aa650d6f7eb404e52ffce429c6e08a747">  118</a></span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* <a class="code" href="classscram_1_1mef_1_1IfThenElse.xhtml#aa650d6f7eb404e52ffce429c6e08a747">expression</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> expression_; }</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="comment">  /// @returns The instruction to execute if the expression is true.</span></div><div class="line"><a name="l00121"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1IfThenElse.xhtml#abd842ad7d8b94120439b72ea9af71c49">  121</a></span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1Instruction.xhtml">Instruction</a>* <a class="code" href="classscram_1_1mef_1_1IfThenElse.xhtml#abd842ad7d8b94120439b72ea9af71c49">then_instruction</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> then_instruction_; }</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="comment">  /// @returns The instruction to execute if the expression is false.</span></div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="comment">  ///          nullptr if the else instruction is optional and not set.</span></div><div class="line"><a name="l00125"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1IfThenElse.xhtml#a3b505b6a9e7ef49095b73d7d65446571">  125</a></span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1Instruction.xhtml">Instruction</a>* <a class="code" href="classscram_1_1mef_1_1IfThenElse.xhtml#a3b505b6a9e7ef49095b73d7d65446571">else_instruction</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> else_instruction_; }</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;  <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* expression_;         <span class="comment">///&lt; The condition source.</span></div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1Instruction.xhtml">Instruction</a>* then_instruction_;  <span class="comment">///&lt; The mandatory &#39;truth&#39; instruction.</span></div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1Instruction.xhtml">Instruction</a>* else_instruction_;  <span class="comment">///&lt; The optional &#39;false&#39; instruction.</span></div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="comment">/// Compound instructions.</span></div><div class="line"><a name="l00134"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Block.xhtml">  134</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Block.xhtml">Block</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Visitable.xhtml">Visitable</a>&lt;Block&gt; {</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="comment">  /// @param[in] instructions  Instructions to be applied in this block.</span></div><div class="line"><a name="l00137"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Block.xhtml#a676b90f6be42e68a3c83cd63fc644fd8">  137</a></span>&#160;<span class="comment"></span>  <span class="keyword">explicit</span> <a class="code" href="classscram_1_1mef_1_1Block.xhtml#a676b90f6be42e68a3c83cd63fc644fd8">Block</a>(std::vector&lt;Instruction*&gt; instructions)</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;      : instructions_(std::move(instructions)) {}</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;<span class="comment">  /// @returns The instructions to be applied in the block.</span></div><div class="line"><a name="l00141"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Block.xhtml#a78250514b4f9959087dc96f37e74eff0">  141</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> std::vector&lt;Instruction*&gt;&amp; <a class="code" href="classscram_1_1mef_1_1Block.xhtml#a78250514b4f9959087dc96f37e74eff0">instructions</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keywordflow">return</span> instructions_;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;  }</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;  std::vector&lt;Instruction*&gt; instructions_;  <span class="comment">///&lt; Zero or more instructions.</span></div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="comment">/// A reusable collection of instructions.</span></div><div class="line"><a name="l00150"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Rule.xhtml">  150</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Rule.xhtml">Rule</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Element.xhtml">Element</a>,</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;             <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Visitable.xhtml">Visitable</a>&lt;Rule&gt;,</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;             <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1NodeMark.xhtml">NodeMark</a>,</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;             <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Usage.xhtml">Usage</a> {</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160; <span class="keyword">public</span>:</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;  <span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1Element.xhtml#a006e56dfae6a5a3bb91f1a4644ed59fa">Element::Element</a>;</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;<span class="comment">  /// @param[in] instructions  One or more instructions for the sequence.</span></div><div class="line"><a name="l00158"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Rule.xhtml#a6094da386afbd31ffa1843dc270a0e0f">  158</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Rule.xhtml#a6094da386afbd31ffa1843dc270a0e0f">instructions</a>(std::vector&lt;Instruction*&gt; instructions) {</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    assert(!instructions.empty());</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    instructions_ = std::move(instructions);</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;  }</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;<span class="comment">  /// @returns The instructions to be applied in the rule.</span></div><div class="line"><a name="l00164"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Rule.xhtml#a609edf81ed71768db0f02ba2dfc14948">  164</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> std::vector&lt;Instruction*&gt;&amp; <a class="code" href="classscram_1_1mef_1_1Rule.xhtml#a609edf81ed71768db0f02ba2dfc14948">instructions</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keywordflow">return</span> instructions_;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;  }</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;  std::vector&lt;Instruction*&gt; instructions_;  <span class="comment">///&lt; Instructions to execute.</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00172"></a><span class="lineno"><a class="line" href="event__tree_8h.xhtml#a7766297ed0a530a6c53fa56a0747f331">  172</a></span>&#160;<span class="keyword">using</span> <a class="code" href="event__tree_8h.xhtml#a7766297ed0a530a6c53fa56a0747f331">RulePtr</a> = std::unique_ptr&lt;Rule&gt;;  <span class="comment">///&lt; Unique rules in a model.</span></div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;<span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1EventTree.xhtml">EventTree</a>;  <span class="comment">// The target of the Link.</span></div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;<span class="comment">/// A link to another event tree in end-states only.</span></div><div class="line"><a name="l00177"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Link.xhtml">  177</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Link.xhtml">Link</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Visitable.xhtml">Visitable</a>&lt;Link&gt;, <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1NodeMark.xhtml">NodeMark</a> {</div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;<span class="comment">  /// @param[in] event_tree  The event tree to be linked in the end-sequence.</span></div><div class="line"><a name="l00180"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Link.xhtml#a72f41975cddffec2c78a6ec17a397634">  180</a></span>&#160;<span class="comment"></span>  <span class="keyword">explicit</span> <a class="code" href="classscram_1_1mef_1_1Link.xhtml#a72f41975cddffec2c78a6ec17a397634">Link</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1EventTree.xhtml">EventTree</a>&amp; event_tree) : event_tree_(event_tree) {}</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;<span class="comment">  /// @returns The referenced event tree in the link.</span></div><div class="line"><a name="l00183"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Link.xhtml#a3886fbcbb5f9bc2ce3b45bc64a25559a">  183</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1EventTree.xhtml">EventTree</a>&amp; <a class="code" href="classscram_1_1mef_1_1Link.xhtml#a3886fbcbb5f9bc2ce3b45bc64a25559a">event_tree</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> event_tree_; }</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;  <span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1EventTree.xhtml">EventTree</a>&amp; event_tree_;  <span class="comment">///&lt; The referenced event tree.</span></div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment">/// The base abstract class for instruction visitors.</span></div><div class="line"><a name="l00190"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1InstructionVisitor.xhtml">  190</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1InstructionVisitor.xhtml">InstructionVisitor</a> {</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160; <span class="keyword">public</span>:</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;  <span class="keyword">virtual</span> ~<a class="code" href="classscram_1_1mef_1_1InstructionVisitor.xhtml">InstructionVisitor</a>() = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;<span class="comment">  /// A set of required visitation functions for concrete visitors to implement.</span></div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;<span class="comment"></span>  <span class="keyword">virtual</span> <span class="keywordtype">void</span> Visit(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1SetHouseEvent.xhtml">SetHouseEvent</a>*) = 0;</div><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> Visit(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1CollectExpression.xhtml">CollectExpression</a>*) = 0;</div><div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> Visit(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1CollectFormula.xhtml">CollectFormula</a>*) = 0;</div><div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> Visit(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Link.xhtml">Link</a>*) = 0;</div><div class="line"><a name="l00200"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1InstructionVisitor.xhtml#a100bdabeea8503c87dd349eda22e3b14">  200</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1InstructionVisitor.xhtml#a100bdabeea8503c87dd349eda22e3b14">Visit</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1IfThenElse.xhtml">IfThenElse</a>* ite) {</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="keywordflow">if</span> (ite-&gt;<a class="code" href="classscram_1_1mef_1_1IfThenElse.xhtml#aa650d6f7eb404e52ffce429c6e08a747">expression</a>()-&gt;<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#af4c1a5cb29e8f45623a99742b7ba8bc5">value</a>()) {</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;      ite-&gt;<a class="code" href="classscram_1_1mef_1_1IfThenElse.xhtml#abd842ad7d8b94120439b72ea9af71c49">then_instruction</a>()-&gt;<a class="code" href="classscram_1_1mef_1_1Instruction.xhtml#a64ff8a04a3cce0febdf9fce4cc25d19a">Accept</a>(<span class="keyword">this</span>);</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ite-&gt;<a class="code" href="classscram_1_1mef_1_1IfThenElse.xhtml#a3b505b6a9e7ef49095b73d7d65446571">else_instruction</a>()) {</div><div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;      ite-&gt;<a class="code" href="classscram_1_1mef_1_1IfThenElse.xhtml#a3b505b6a9e7ef49095b73d7d65446571">else_instruction</a>()-&gt;<a class="code" href="classscram_1_1mef_1_1Instruction.xhtml#a64ff8a04a3cce0febdf9fce4cc25d19a">Accept</a>(<span class="keyword">this</span>);</div><div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    }</div><div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;  }</div><div class="line"><a name="l00207"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1InstructionVisitor.xhtml#a9925b9935fcab071c97e90b377559d6a">  207</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1InstructionVisitor.xhtml#a9925b9935fcab071c97e90b377559d6a">Visit</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Block.xhtml">Block</a>* block) {</div><div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Instruction.xhtml">Instruction</a>* instruction : block-&gt;<a class="code" href="classscram_1_1mef_1_1Block.xhtml#a78250514b4f9959087dc96f37e74eff0">instructions</a>())</div><div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;      instruction-&gt;Accept(<span class="keyword">this</span>);</div><div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;  }</div><div class="line"><a name="l00211"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1InstructionVisitor.xhtml#a17b5f067a805f191ed84427c7e4a4537">  211</a></span>&#160;  <span class="keyword">virtual</span> <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1InstructionVisitor.xhtml#a17b5f067a805f191ed84427c7e4a4537">Visit</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Rule.xhtml">Rule</a>* rule) {</div><div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Instruction.xhtml">Instruction</a>* instruction : rule-&gt;<a class="code" href="classscram_1_1mef_1_1Rule.xhtml#a6094da386afbd31ffa1843dc270a0e0f">instructions</a>())</div><div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;      instruction-&gt;Accept(<span class="keyword">this</span>);</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;  }<span class="comment"></span></div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;<span class="comment">/// Visits only instructions and ignores non-instructions.</span></div><div class="line"><a name="l00219"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1NullVisitor.xhtml">  219</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1NullVisitor.xhtml">NullVisitor</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1InstructionVisitor.xhtml">InstructionVisitor</a> {</div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160; <span class="keyword">public</span>:</div><div class="line"><a name="l00221"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1NullVisitor.xhtml#ab1471e842002f3b841264b2710bdf369">  221</a></span>&#160;  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1NullVisitor.xhtml#ab1471e842002f3b841264b2710bdf369">Visit</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1SetHouseEvent.xhtml">SetHouseEvent</a>*)<span class="keyword"> override </span>{}</div><div class="line"><a name="l00222"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1NullVisitor.xhtml#abb20e2759037c9d49bf55a3f8c2d1ddc">  222</a></span>&#160;  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1NullVisitor.xhtml#abb20e2759037c9d49bf55a3f8c2d1ddc">Visit</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1CollectExpression.xhtml">CollectExpression</a>*)<span class="keyword"> override </span>{}</div><div class="line"><a name="l00223"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1NullVisitor.xhtml#a387408bee706990d89424476f84a5a15">  223</a></span>&#160;  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1NullVisitor.xhtml#a387408bee706990d89424476f84a5a15">Visit</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1CollectFormula.xhtml">CollectFormula</a>*)<span class="keyword"> override </span>{}</div><div class="line"><a name="l00224"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1NullVisitor.xhtml#a3c02254bd74a2badea031f519c75b56f">  224</a></span>&#160;  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1NullVisitor.xhtml#a3c02254bd74a2badea031f519c75b56f">Visit</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Link.xhtml">Link</a>*)<span class="keyword"> override </span>{}</div><div class="line"><a name="l00225"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1NullVisitor.xhtml#a6c9500b9e2f7d4e1dfa079469af5626f">  225</a></span>&#160;  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1NullVisitor.xhtml#a6c9500b9e2f7d4e1dfa079469af5626f">Visit</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1IfThenElse.xhtml">IfThenElse</a>* ite)<span class="keyword"> override </span>{</div><div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    ite-&gt;<a class="code" href="classscram_1_1mef_1_1IfThenElse.xhtml#abd842ad7d8b94120439b72ea9af71c49">then_instruction</a>()-&gt;<a class="code" href="classscram_1_1mef_1_1Instruction.xhtml#a64ff8a04a3cce0febdf9fce4cc25d19a">Accept</a>(<span class="keyword">this</span>);</div><div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;    <span class="keywordflow">if</span> (ite-&gt;<a class="code" href="classscram_1_1mef_1_1IfThenElse.xhtml#a3b505b6a9e7ef49095b73d7d65446571">else_instruction</a>())</div><div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;      ite-&gt;<a class="code" href="classscram_1_1mef_1_1IfThenElse.xhtml#a3b505b6a9e7ef49095b73d7d65446571">else_instruction</a>()-&gt;<a class="code" href="classscram_1_1mef_1_1Instruction.xhtml#a64ff8a04a3cce0febdf9fce4cc25d19a">Accept</a>(<span class="keyword">this</span>);</div><div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;  }</div><div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;};</div><div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;</div><div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">class</span> T&gt;</div><div class="line"><a name="l00233"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Visitable.xhtml#a8e512950cd6e9f9cd20392e56f085db7">  233</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Visitable.xhtml#a8e512950cd6e9f9cd20392e56f085db7">Visitable&lt;T&gt;::Accept</a>(<a class="code" href="classscram_1_1mef_1_1InstructionVisitor.xhtml">InstructionVisitor</a>* visitor)<span class="keyword"> const </span>{</div><div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;  visitor-&gt;<a class="code" href="classscram_1_1mef_1_1InstructionVisitor.xhtml#a6e511343744f2ac89798a54fb1b0babc">Visit</a>(static_cast&lt;const T*&gt;(<span class="keyword">this</span>));</div><div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;}</div><div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="comment">/// Representation of sequences in event trees.</span></div><div class="line"><a name="l00238"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Sequence.xhtml">  238</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Sequence.xhtml">Sequence</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Element.xhtml">Element</a>, <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Usage.xhtml">Usage</a> {</div><div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160; <span class="keyword">public</span>:</div><div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;  <span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1Element.xhtml#a006e56dfae6a5a3bb91f1a4644ed59fa">Element::Element</a>;</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;<span class="comment">  /// @param[in] instructions  Zero or more instructions for the sequence.</span></div><div class="line"><a name="l00243"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Sequence.xhtml#a7f4be95643441bdad46a15d58ad15c13">  243</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Sequence.xhtml#a7f4be95643441bdad46a15d58ad15c13">instructions</a>(std::vector&lt;Instruction*&gt; instructions) {</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    instructions_ = std::move(instructions);</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;  }</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="comment">  /// @returns The instructions to be applied at this sequence.</span></div><div class="line"><a name="l00248"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Sequence.xhtml#aa4a5806e0dacb6cda5d81e5c0e6a26c2">  248</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> std::vector&lt;Instruction*&gt;&amp; <a class="code" href="classscram_1_1mef_1_1Sequence.xhtml#aa4a5806e0dacb6cda5d81e5c0e6a26c2">instructions</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keywordflow">return</span> instructions_;</div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;  }</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160; <span class="keyword">private</span>:<span class="comment"></span></div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;<span class="comment">  /// Instructions to execute with the sequence.</span></div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;<span class="comment"></span>  std::vector&lt;Instruction*&gt; instructions_;</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;};</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;<span class="comment">/// Sequences are defined in event trees but referenced in other constructs.</span></div><div class="line"><a name="l00258"></a><span class="lineno"><a class="line" href="event__tree_8h.xhtml#a14bbb8758b9a4fb43a532a385f9d72d6">  258</a></span>&#160;<span class="comment"></span><span class="keyword">using</span> <a class="code" href="event__tree_8h.xhtml#a14bbb8758b9a4fb43a532a385f9d72d6">SequencePtr</a> = std::unique_ptr&lt;Sequence&gt;;</div><div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div><div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;<span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1EventTree.xhtml">EventTree</a>;  <span class="comment">// Manages the order assignment to functional events.</span></div><div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;<span class="comment">/// Representation of functional events in event trees.</span></div><div class="line"><a name="l00263"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1FunctionalEvent.xhtml">  263</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1FunctionalEvent.xhtml">FunctionalEvent</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Element.xhtml">Element</a>, <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Usage.xhtml">Usage</a> {</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;  <span class="keyword">friend</span> <span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1EventTree.xhtml">EventTree</a>;</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160; <span class="keyword">public</span>:</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;  <span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1Element.xhtml#a006e56dfae6a5a3bb91f1a4644ed59fa">Element::Element</a>;</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="comment">  /// @returns The order of the functional event in the event tree.</span></div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="comment">  /// @returns 0 if no order has been assigned.</span></div><div class="line"><a name="l00271"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1FunctionalEvent.xhtml#a30eb85c55698bafe4bab0670d019c157">  271</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">int</span> <a class="code" href="classscram_1_1mef_1_1FunctionalEvent.xhtml#a30eb85c55698bafe4bab0670d019c157">order</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> order_; }</div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160; <span class="keyword">private</span>:<span class="comment"></span></div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;<span class="comment">  /// Sets the functional event order.</span></div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> order(<span class="keywordtype">int</span> order) { order_ = order; }</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div><div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;  <span class="keywordtype">int</span> order_ = 0;  <span class="comment">///&lt; The order of the functional event.</span></div><div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="comment">/// Functional events are defined in and unique to event trees.</span></div><div class="line"><a name="l00281"></a><span class="lineno"><a class="line" href="event__tree_8h.xhtml#a8b549072de1f485eb68927e6b170e459">  281</a></span>&#160;<span class="comment"></span><span class="keyword">using</span> <a class="code" href="event__tree_8h.xhtml#a8b549072de1f485eb68927e6b170e459">FunctionalEventPtr</a> = std::unique_ptr&lt;FunctionalEvent&gt;;</div><div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;</div><div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;<span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Fork.xhtml">Fork</a>;</div><div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;<span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1NamedBranch.xhtml">NamedBranch</a>;</div><div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;<span class="comment">/// The branch representation in event trees.</span></div><div class="line"><a name="l00287"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Branch.xhtml">  287</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Branch.xhtml">Branch</a> {</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;<span class="comment">  /// The types of possible branch end-points.</span></div><div class="line"><a name="l00290"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Branch.xhtml#af04a63b1be637d76cf52ab21fcc3da7c">  290</a></span>&#160;<span class="comment"></span>  <span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1Branch.xhtml#af04a63b1be637d76cf52ab21fcc3da7c">Target</a> = boost::variant&lt;Sequence*, Fork*, NamedBranch*&gt;;</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;<span class="comment">  /// Sets the instructions to execute at the branch.</span></div><div class="line"><a name="l00293"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Branch.xhtml#ac3ed6a402b65d84fcc5d0c2ed52e8d05">  293</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Branch.xhtml#ac3ed6a402b65d84fcc5d0c2ed52e8d05">instructions</a>(std::vector&lt;Instruction*&gt; instructions) {</div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    instructions_ = std::move(instructions);</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;  }</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="comment">  /// @returns The instructions to execute at the branch.</span></div><div class="line"><a name="l00298"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Branch.xhtml#aef3fc76565228977c770034b8b01bc2c">  298</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> std::vector&lt;Instruction*&gt;&amp; <a class="code" href="classscram_1_1mef_1_1Branch.xhtml#aef3fc76565228977c770034b8b01bc2c">instructions</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <span class="keywordflow">return</span> instructions_;</div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;  }</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;<span class="comment">  /// Sets the target for the branch.</span></div><div class="line"><a name="l00303"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Branch.xhtml#a2d5ae6a8ba8ca8f81818d4c12172a5b5">  303</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1Branch.xhtml#a2d5ae6a8ba8ca8f81818d4c12172a5b5">target</a>(<a class="code" href="classscram_1_1mef_1_1Branch.xhtml#af04a63b1be637d76cf52ab21fcc3da7c">Target</a> target) { target_ = std::move(target); }</div><div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="comment">  /// @returns The target semantics or end-points of the branch.</span></div><div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="comment">  /// @pre The target has been set.</span></div><div class="line"><a name="l00308"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Branch.xhtml#a4da8cf589eb0aa47910aecfdedbdba6c">  308</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Branch.xhtml#af04a63b1be637d76cf52ab21fcc3da7c">Target</a>&amp; <a class="code" href="classscram_1_1mef_1_1Branch.xhtml#a4da8cf589eb0aa47910aecfdedbdba6c">target</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    assert(ext::as&lt;bool&gt;(target_));</div><div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    <span class="keywordflow">return</span> target_;</div><div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;  }</div><div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;</div><div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;  std::vector&lt;Instruction*&gt; instructions_;  <span class="comment">///&lt; Zero or more instructions.</span></div><div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1Branch.xhtml#af04a63b1be637d76cf52ab21fcc3da7c">Target</a> target_;  <span class="comment">///&lt; The target semantics of the branch.</span></div><div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;<span class="comment">/// Named branches that can be referenced and reused.</span></div><div class="line"><a name="l00319"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1NamedBranch.xhtml">  319</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1NamedBranch.xhtml">NamedBranch</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Element.xhtml">Element</a>,</div><div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;                    <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Branch.xhtml">Branch</a>,</div><div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;                    <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1NodeMark.xhtml">NodeMark</a>,</div><div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;                    <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Usage.xhtml">Usage</a> {</div><div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160; <span class="keyword">public</span>:</div><div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;  <span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1Element.xhtml#a006e56dfae6a5a3bb91f1a4644ed59fa">Element::Element</a>;</div><div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;};</div><div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;</div><div class="line"><a name="l00327"></a><span class="lineno"><a class="line" href="event__tree_8h.xhtml#a03af7b139e3d786505ca38a80221d2ba">  327</a></span>&#160;<span class="keyword">using</span> <a class="code" href="event__tree_8h.xhtml#a03af7b139e3d786505ca38a80221d2ba">NamedBranchPtr</a> = std::unique_ptr&lt;NamedBranch&gt;;  <span class="comment">///&lt; Unique in event tree.</span></div><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="comment">/// Functional-event state paths in event trees.</span></div><div class="line"><a name="l00330"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Path.xhtml">  330</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Path.xhtml">Path</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Branch.xhtml">Branch</a> {</div><div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;<span class="comment">  /// @param[in] state  State identifier string for functional event.</span></div><div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="comment">  /// @throws LogicError  The string is empty or malformed.</span></div><div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;<span class="comment"></span>  <span class="keyword">explicit</span> <a class="code" href="classscram_1_1mef_1_1Path.xhtml">Path</a>(std::string state);</div><div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;<span class="comment">  /// @returns The state of a functional event.</span></div><div class="line"><a name="l00338"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Path.xhtml#a485a6b2f0e1897ed031ad234a18ec233">  338</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> std::string&amp; <a class="code" href="classscram_1_1mef_1_1Path.xhtml#a485a6b2f0e1897ed031ad234a18ec233">state</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> state_; }</div><div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;</div><div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;  std::string state_;  <span class="comment">///&lt; The state identifier.</span></div><div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;<span class="comment">/// Functional event forks.</span></div><div class="line"><a name="l00345"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Fork.xhtml">  345</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1Fork.xhtml">Fork</a> {</div><div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160; <span class="keyword">public</span>:<span class="comment"></span></div><div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;<span class="comment">  /// @param[in] functional_event  The source functional event.</span></div><div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;<span class="comment">  /// @param[in] paths  The fork paths with functional event states.</span></div><div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;<span class="comment">  /// @throws ValidationError  The path states are duplicated.</span></div><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1Fork.xhtml">Fork</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1FunctionalEvent.xhtml">FunctionalEvent</a>&amp; functional_event, std::vector&lt;Path&gt; paths);</div><div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;<span class="comment">  /// @returns The functional event of the fork.</span></div><div class="line"><a name="l00354"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Fork.xhtml#a673197bb550b4b62db7fae7c8a0bd6dc">  354</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1FunctionalEvent.xhtml">FunctionalEvent</a>&amp; <a class="code" href="classscram_1_1mef_1_1Fork.xhtml#a673197bb550b4b62db7fae7c8a0bd6dc">functional_event</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> functional_event_; }</div><div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;<span class="comment">  /// @returns The fork paths with functional event states.</span></div><div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00358"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Fork.xhtml#ac82c25bb78d12a3bac21ea26cc5cdc99">  358</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> std::vector&lt;Path&gt;&amp; <a class="code" href="classscram_1_1mef_1_1Fork.xhtml#ac82c25bb78d12a3bac21ea26cc5cdc99">paths</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> paths_; }</div><div class="line"><a name="l00359"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1Fork.xhtml#aefffbc7850fbfad97b35e866ade81342">  359</a></span>&#160;  std::vector&lt;Path&gt;&amp; <a class="code" href="classscram_1_1mef_1_1Fork.xhtml#aefffbc7850fbfad97b35e866ade81342">paths</a>() { <span class="keywordflow">return</span> paths_; }<span class="comment"></span></div><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;  <span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1FunctionalEvent.xhtml">FunctionalEvent</a>&amp; functional_event_;  <span class="comment">///&lt; The fork source.</span></div><div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;<span class="comment"></span>  std::vector&lt;Path&gt; paths_;  <span class="comment">///&lt; The non-empty collection of fork paths.</span></div><div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;<span class="comment">/// Event Tree representation with MEF constructs.</span></div><div class="line"><a name="l00368"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1EventTree.xhtml">  368</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1EventTree.xhtml">EventTree</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Element.xhtml">Element</a>, <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Usage.xhtml">Usage</a>, <span class="keyword">private</span> boost::noncopyable {</div><div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160; <span class="keyword">public</span>:</div><div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;  <span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1Element.xhtml#a006e56dfae6a5a3bb91f1a4644ed59fa">Element::Element</a>;</div><div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;<span class="comment">  /// @returns The initial state branch of the event tree.</span></div><div class="line"><a name="l00373"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1EventTree.xhtml#a12aa312ac26a4fc798ff68816d9482b0">  373</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Branch.xhtml">Branch</a>&amp; <a class="code" href="classscram_1_1mef_1_1EventTree.xhtml#a12aa312ac26a4fc798ff68816d9482b0">initial_state</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> initial_state_; }</div><div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;<span class="comment">  /// Sets the initial state of the event tree.</span></div><div class="line"><a name="l00376"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1EventTree.xhtml#a39fa946b1c05225c0a05735989403eeb">  376</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1EventTree.xhtml#a39fa946b1c05225c0a05735989403eeb">initial_state</a>(<a class="code" href="classscram_1_1mef_1_1Branch.xhtml">Branch</a> branch) { initial_state_ = std::move(branch); }</div><div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;<span class="comment">  /// @returns The container of event tree constructs of specific kind</span></div><div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;<span class="comment">  ///          with construct original names as keys.</span></div><div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00381"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1EventTree.xhtml#a174d471ad629ca43a9abd30cfe34e82f">  381</a></span>&#160;<span class="comment"></span>  <span class="keyword">const</span> <a class="code" href="element_8h.xhtml#ab162a6f742c23405f33db706d5a927b4">ElementTable&lt;FunctionalEventPtr&gt;</a>&amp; <a class="code" href="classscram_1_1mef_1_1EventTree.xhtml#a174d471ad629ca43a9abd30cfe34e82f">functional_events</a>()<span class="keyword"> const </span>{</div><div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;    <span class="keywordflow">return</span> functional_events_;</div><div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;  }</div><div class="line"><a name="l00384"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1EventTree.xhtml#af6c8fa24558e26bbe305602ca86f9ae4">  384</a></span>&#160;  <span class="keyword">const</span> <a class="code" href="element_8h.xhtml#ab162a6f742c23405f33db706d5a927b4">ElementTable&lt;NamedBranchPtr&gt;</a>&amp; <a class="code" href="classscram_1_1mef_1_1EventTree.xhtml#af6c8fa24558e26bbe305602ca86f9ae4">branches</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> branches_; }<span class="comment"></span></div><div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;<span class="comment">  /// Adds event tree constructs into the container.</span></div><div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;<span class="comment">  /// @param[in] element  A unique element defined in this event tree.</span></div><div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;<span class="comment">  /// @throws ValidationError  The element is already in this container.</span></div><div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1NaryExpression.xhtml">Add</a>(<a class="code" href="classscram_1_1mef_1_1Sequence.xhtml">Sequence</a>* element);</div><div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;  <span class="keywordtype">void</span> Add(<a class="code" href="event__tree_8h.xhtml#a8b549072de1f485eb68927e6b170e459">FunctionalEventPtr</a> element);</div><div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;  <span class="keywordtype">void</span> Add(<a class="code" href="event__tree_8h.xhtml#a03af7b139e3d786505ca38a80221d2ba">NamedBranchPtr</a> element);</div><div class="line"><a name="l00397"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1EventTree.xhtml#a0c8a71a2f912b69719f1463d1ba8edfe">  397</a></span>&#160;  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1EventTree.xhtml#a0c8a71a2f912b69719f1463d1ba8edfe">Add</a>(std::unique_ptr&lt;Fork&gt; element) {</div><div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;    forks_.push_back(std::move(element));</div><div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;  }<span class="comment"></span></div><div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;  <a class="code" href="classscram_1_1mef_1_1Branch.xhtml">Branch</a> initial_state_;  <span class="comment">///&lt; The starting point.</span></div><div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;<span class="comment">  /// Containers for unique event tree constructs defined in this event tree.</span></div><div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;<span class="comment"></span>  <a class="code" href="element_8h.xhtml#ab162a6f742c23405f33db706d5a927b4">ElementTable&lt;Sequence*&gt;</a> sequences_;</div><div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;  <a class="code" href="element_8h.xhtml#ab162a6f742c23405f33db706d5a927b4">ElementTable&lt;FunctionalEventPtr&gt;</a> functional_events_;</div><div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;  <a class="code" href="element_8h.xhtml#ab162a6f742c23405f33db706d5a927b4">ElementTable&lt;NamedBranchPtr&gt;</a> branches_;<span class="comment"></span></div><div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;<span class="comment"></span>  std::vector&lt;std::unique_ptr&lt;Fork&gt;&gt; forks_;  <span class="comment">///&lt; Lifetime management of forks.</span></div><div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;</div><div class="line"><a name="l00414"></a><span class="lineno"><a class="line" href="event__tree_8h.xhtml#a9fb29cbc2c3de675454fc41c493f1405">  414</a></span>&#160;<span class="keyword">using</span> <a class="code" href="event__tree_8h.xhtml#a9fb29cbc2c3de675454fc41c493f1405">EventTreePtr</a> = std::unique_ptr&lt;EventTree&gt;;  <span class="comment">///&lt; Unique trees in a model.</span></div><div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;<span class="comment"></span><span class="comment"></span></div><div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;<span class="comment">/// Event-tree Initiating Event.</span></div><div class="line"><a name="l00417"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1InitiatingEvent.xhtml">  417</a></span>&#160;<span class="comment"></span><span class="keyword">class </span><a class="code" href="classscram_1_1mef_1_1InitiatingEvent.xhtml">InitiatingEvent</a> : <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Element.xhtml">Element</a>, <span class="keyword">public</span> <a class="code" href="classscram_1_1mef_1_1Usage.xhtml">Usage</a> {</div><div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160; <span class="keyword">public</span>:</div><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;  <span class="keyword">using</span> <a class="code" href="classscram_1_1mef_1_1Element.xhtml#a006e56dfae6a5a3bb91f1a4644ed59fa">Element::Element</a>;</div><div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;<span class="comment">  /// Associates an event tree to the initiating event.</span></div><div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;<span class="comment">  ///</span></div><div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;<span class="comment">  /// @param[in] event_tree  Fully initialized event tree container.</span></div><div class="line"><a name="l00424"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1InitiatingEvent.xhtml#aabe81dc526fdae951724e42707c1164f">  424</a></span>&#160;<span class="comment"></span>  <span class="keywordtype">void</span> <a class="code" href="classscram_1_1mef_1_1InitiatingEvent.xhtml#aabe81dc526fdae951724e42707c1164f">event_tree</a>(<a class="code" href="classscram_1_1mef_1_1EventTree.xhtml">EventTree</a>* event_tree) {</div><div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    assert(!event_tree_ &amp;&amp; event_tree &amp;&amp; <span class="stringliteral">&quot;Resetting or un-setting event tree.&quot;</span>);</div><div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    event_tree_ = event_tree;</div><div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;  }</div><div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;<span class="comment">  /// @returns The event tree of the initiating event.</span></div><div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;<span class="comment">  ///          nullptr if the event tree is not set.</span></div><div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;<span class="comment">  /// @{</span></div><div class="line"><a name="l00432"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1InitiatingEvent.xhtml#a3e12c3ef25c1d9f85b68cc67fb592d6c">  432</a></span>&#160;<span class="comment"></span>  <a class="code" href="classscram_1_1mef_1_1EventTree.xhtml">EventTree</a>* <a class="code" href="classscram_1_1mef_1_1InitiatingEvent.xhtml#a3e12c3ef25c1d9f85b68cc67fb592d6c">event_tree</a>()<span class="keyword"> const </span>{ <span class="keywordflow">return</span> event_tree_; }</div><div class="line"><a name="l00433"></a><span class="lineno"><a class="line" href="classscram_1_1mef_1_1InitiatingEvent.xhtml#a6bdcfc44f13ba954e679bd72694ad22b">  433</a></span>&#160;  <a class="code" href="classscram_1_1mef_1_1EventTree.xhtml">EventTree</a>* <a class="code" href="classscram_1_1mef_1_1InitiatingEvent.xhtml#a6bdcfc44f13ba954e679bd72694ad22b">event_tree</a>() { <span class="keywordflow">return</span> event_tree_; }<span class="comment"></span></div><div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;<span class="comment">  /// @}</span></div><div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160; <span class="keyword">private</span>:</div><div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;  <a class="code" href="classscram_1_1mef_1_1EventTree.xhtml">EventTree</a>* event_tree_ = <span class="keyword">nullptr</span>;  <span class="comment">///&lt; The optional event tree specification.</span></div><div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;<span class="comment"></span>};</div><div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;<span class="comment">/// Unique initiating events in a model.</span></div><div class="line"><a name="l00441"></a><span class="lineno"><a class="line" href="event__tree_8h.xhtml#a11e578b8e757b3eaa293a1c657f1f29a">  441</a></span>&#160;<span class="comment"></span><span class="keyword">using</span> <a class="code" href="event__tree_8h.xhtml#a11e578b8e757b3eaa293a1c657f1f29a">InitiatingEventPtr</a> = std::unique_ptr&lt;InitiatingEvent&gt;;</div><div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;</div><div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;}  <span class="comment">// namespace mef</span></div><div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;}  <span class="comment">// namespace scram</span></div><div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;</div><div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;<span class="preprocessor">#endif  // SCRAM_SRC_EVENT_TREE_H_</span></div><div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml">scram::mef::Formula</a></div><div class="ttdoc">Boolean formula with operators and arguments. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00228">event.h:228</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1InitiatingEvent_xhtml_a3e12c3ef25c1d9f85b68cc67fb592d6c"><div class="ttname"><a href="classscram_1_1mef_1_1InitiatingEvent.xhtml#a3e12c3ef25c1d9f85b68cc67fb592d6c">scram::mef::InitiatingEvent::event_tree</a></div><div class="ttdeci">EventTree * event_tree() const </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00432">event_tree.h:432</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1IfThenElse_xhtml_a3b505b6a9e7ef49095b73d7d65446571"><div class="ttname"><a href="classscram_1_1mef_1_1IfThenElse.xhtml#a3b505b6a9e7ef49095b73d7d65446571">scram::mef::IfThenElse::else_instruction</a></div><div class="ttdeci">Instruction * else_instruction() const </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00125">event_tree.h:125</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1IfThenElse_xhtml_abd842ad7d8b94120439b72ea9af71c49"><div class="ttname"><a href="classscram_1_1mef_1_1IfThenElse.xhtml#abd842ad7d8b94120439b72ea9af71c49">scram::mef::IfThenElse::then_instruction</a></div><div class="ttdeci">Instruction * then_instruction() const </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00121">event_tree.h:121</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1SetHouseEvent_xhtml_a4d7470e83d76df47f6d7e3febb2ae1d1"><div class="ttname"><a href="classscram_1_1mef_1_1SetHouseEvent.xhtml#a4d7470e83d76df47f6d7e3febb2ae1d1">scram::mef::SetHouseEvent::state</a></div><div class="ttdeci">bool state() const </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00070">event_tree.h:70</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NullVisitor_xhtml_abb20e2759037c9d49bf55a3f8c2d1ddc"><div class="ttname"><a href="classscram_1_1mef_1_1NullVisitor.xhtml#abb20e2759037c9d49bf55a3f8c2d1ddc">scram::mef::NullVisitor::Visit</a></div><div class="ttdeci">void Visit(const CollectExpression *) override</div><div class="ttdoc">A set of required visitation functions for concrete visitors to implement. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00222">event_tree.h:222</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1InstructionVisitor_xhtml_a9925b9935fcab071c97e90b377559d6a"><div class="ttname"><a href="classscram_1_1mef_1_1InstructionVisitor.xhtml#a9925b9935fcab071c97e90b377559d6a">scram::mef::InstructionVisitor::Visit</a></div><div class="ttdeci">virtual void Visit(const Block *block)</div><div class="ttdoc">A set of required visitation functions for concrete visitors to implement. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00207">event_tree.h:207</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Element_xhtml_a006e56dfae6a5a3bb91f1a4644ed59fa"><div class="ttname"><a href="classscram_1_1mef_1_1Element.xhtml#a006e56dfae6a5a3bb91f1a4644ed59fa">scram::mef::Element::Element</a></div><div class="ttdeci">Element(std::string name)</div><div class="ttdoc">Constructs an element with an original name. </div><div class="ttdef"><b>Definition:</b> <a href="element_8cc_source.xhtml#l00031">element.cc:31</a></div></div>
<div class="ttc" id="event__tree_8h_xhtml_a11e578b8e757b3eaa293a1c657f1f29a"><div class="ttname"><a href="event__tree_8h.xhtml#a11e578b8e757b3eaa293a1c657f1f29a">scram::mef::InitiatingEventPtr</a></div><div class="ttdeci">std::unique_ptr&lt; InitiatingEvent &gt; InitiatingEventPtr</div><div class="ttdoc">Unique initiating events in a model. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00441">event_tree.h:441</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1EventTree_xhtml_a12aa312ac26a4fc798ff68816d9482b0"><div class="ttname"><a href="classscram_1_1mef_1_1EventTree.xhtml#a12aa312ac26a4fc798ff68816d9482b0">scram::mef::EventTree::initial_state</a></div><div class="ttdeci">const Branch &amp; initial_state() const </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00373">event_tree.h:373</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1InitiatingEvent_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1InitiatingEvent.xhtml">scram::mef::InitiatingEvent</a></div><div class="ttdoc">Event-tree Initiating Event. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00417">event_tree.h:417</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CollectExpression_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1CollectExpression.xhtml">scram::mef::CollectExpression</a></div><div class="ttdoc">The operation of collecting expressions for event tree sequences. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00078">event_tree.h:78</a></div></div>
<div class="ttc" id="element_8h_xhtml"><div class="ttname"><a href="element_8h.xhtml">element.h</a></div><div class="ttdoc">Helper classes, structs, and properties common to all other classes. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Instruction_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Instruction.xhtml">scram::mef::Instruction</a></div><div class="ttdoc">Instructions and rules for event tree paths. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00042">event_tree.h:42</a></div></div>
<div class="ttc" id="event__tree_8h_xhtml_a14bbb8758b9a4fb43a532a385f9d72d6"><div class="ttname"><a href="event__tree_8h.xhtml#a14bbb8758b9a4fb43a532a385f9d72d6">scram::mef::SequencePtr</a></div><div class="ttdeci">std::unique_ptr&lt; Sequence &gt; SequencePtr</div><div class="ttdoc">Sequences are defined in event trees but referenced in other constructs. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00258">event_tree.h:258</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1FunctionalEvent_xhtml_a30eb85c55698bafe4bab0670d019c157"><div class="ttname"><a href="classscram_1_1mef_1_1FunctionalEvent.xhtml#a30eb85c55698bafe4bab0670d019c157">scram::mef::FunctionalEvent::order</a></div><div class="ttdeci">int order() const </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00271">event_tree.h:271</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Block_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Block.xhtml">scram::mef::Block</a></div><div class="ttdoc">Compound instructions. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00134">event_tree.h:134</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Fork_xhtml_a673197bb550b4b62db7fae7c8a0bd6dc"><div class="ttname"><a href="classscram_1_1mef_1_1Fork.xhtml#a673197bb550b4b62db7fae7c8a0bd6dc">scram::mef::Fork::functional_event</a></div><div class="ttdeci">const FunctionalEvent &amp; functional_event() const </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00354">event_tree.h:354</a></div></div>
<div class="ttc" id="event__tree_8h_xhtml_a8b549072de1f485eb68927e6b170e459"><div class="ttname"><a href="event__tree_8h.xhtml#a8b549072de1f485eb68927e6b170e459">scram::mef::FunctionalEventPtr</a></div><div class="ttdeci">std::unique_ptr&lt; FunctionalEvent &gt; FunctionalEventPtr</div><div class="ttdoc">Functional events are defined in and unique to event trees. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00281">event_tree.h:281</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1SetHouseEvent_xhtml_aece4a88079685cfe53968c770214ba88"><div class="ttname"><a href="classscram_1_1mef_1_1SetHouseEvent.xhtml#aece4a88079685cfe53968c770214ba88">scram::mef::SetHouseEvent::SetHouseEvent</a></div><div class="ttdeci">SetHouseEvent(std::string name, bool state)</div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00063">event_tree.h:63</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Branch_xhtml_af04a63b1be637d76cf52ab21fcc3da7c"><div class="ttname"><a href="classscram_1_1mef_1_1Branch.xhtml#af04a63b1be637d76cf52ab21fcc3da7c">scram::mef::Branch::Target</a></div><div class="ttdeci">boost::variant&lt; Sequence *, Fork *, NamedBranch * &gt; Target</div><div class="ttdoc">The types of possible branch end-points. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00290">event_tree.h:290</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1InitiatingEvent_xhtml_aabe81dc526fdae951724e42707c1164f"><div class="ttname"><a href="classscram_1_1mef_1_1InitiatingEvent.xhtml#aabe81dc526fdae951724e42707c1164f">scram::mef::InitiatingEvent::event_tree</a></div><div class="ttdeci">void event_tree(EventTree *event_tree)</div><div class="ttdoc">Associates an event tree to the initiating event. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00424">event_tree.h:424</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Sequence_xhtml_aa4a5806e0dacb6cda5d81e5c0e6a26c2"><div class="ttname"><a href="classscram_1_1mef_1_1Sequence.xhtml#aa4a5806e0dacb6cda5d81e5c0e6a26c2">scram::mef::Sequence::instructions</a></div><div class="ttdeci">const std::vector&lt; Instruction * &gt; &amp; instructions() const </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00248">event_tree.h:248</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Sequence_xhtml_a7f4be95643441bdad46a15d58ad15c13"><div class="ttname"><a href="classscram_1_1mef_1_1Sequence.xhtml#a7f4be95643441bdad46a15d58ad15c13">scram::mef::Sequence::instructions</a></div><div class="ttdeci">void instructions(std::vector&lt; Instruction * &gt; instructions)</div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00243">event_tree.h:243</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Branch_xhtml_a4da8cf589eb0aa47910aecfdedbdba6c"><div class="ttname"><a href="classscram_1_1mef_1_1Branch.xhtml#a4da8cf589eb0aa47910aecfdedbdba6c">scram::mef::Branch::target</a></div><div class="ttdeci">const Target &amp; target() const </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00308">event_tree.h:308</a></div></div>
<div class="ttc" id="event__tree_8h_xhtml_a9fb29cbc2c3de675454fc41c493f1405"><div class="ttname"><a href="event__tree_8h.xhtml#a9fb29cbc2c3de675454fc41c493f1405">scram::mef::EventTreePtr</a></div><div class="ttdeci">std::unique_ptr&lt; EventTree &gt; EventTreePtr</div><div class="ttdoc">Unique trees in a model. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00414">event_tree.h:414</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1InstructionVisitor_xhtml_a17b5f067a805f191ed84427c7e4a4537"><div class="ttname"><a href="classscram_1_1mef_1_1InstructionVisitor.xhtml#a17b5f067a805f191ed84427c7e4a4537">scram::mef::InstructionVisitor::Visit</a></div><div class="ttdeci">virtual void Visit(const Rule *rule)</div><div class="ttdoc">A set of required visitation functions for concrete visitors to implement. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00211">event_tree.h:211</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Visitable_xhtml_a8e512950cd6e9f9cd20392e56f085db7"><div class="ttname"><a href="classscram_1_1mef_1_1Visitable.xhtml#a8e512950cd6e9f9cd20392e56f085db7">scram::mef::Visitable::Accept</a></div><div class="ttdeci">void Accept(InstructionVisitor *visitor) const final</div><div class="ttdoc">Calls visit with the object pointer T*. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00233">event_tree.h:233</a></div></div>
<div class="ttc" id="event__tree_8h_xhtml_a7766297ed0a530a6c53fa56a0747f331"><div class="ttname"><a href="event__tree_8h.xhtml#a7766297ed0a530a6c53fa56a0747f331">scram::mef::RulePtr</a></div><div class="ttdeci">std::unique_ptr&lt; Rule &gt; RulePtr</div><div class="ttdoc">Unique rules in a model. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00172">event_tree.h:172</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1EventTree_xhtml_a0c8a71a2f912b69719f1463d1ba8edfe"><div class="ttname"><a href="classscram_1_1mef_1_1EventTree.xhtml#a0c8a71a2f912b69719f1463d1ba8edfe">scram::mef::EventTree::Add</a></div><div class="ttdeci">void Add(std::unique_ptr&lt; Fork &gt; element)</div><div class="ttdoc">Adds event tree constructs into the container. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00397">event_tree.h:397</a></div></div>
<div class="ttc" id="event__tree_8h_xhtml_a03af7b139e3d786505ca38a80221d2ba"><div class="ttname"><a href="event__tree_8h.xhtml#a03af7b139e3d786505ca38a80221d2ba">scram::mef::NamedBranchPtr</a></div><div class="ttdeci">std::unique_ptr&lt; NamedBranch &gt; NamedBranchPtr</div><div class="ttdoc">Unique in event tree. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00327">event_tree.h:327</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1IfThenElse_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1IfThenElse.xhtml">scram::mef::IfThenElse</a></div><div class="ttdoc">Conditional application of instructions. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00106">event_tree.h:106</a></div></div>
<div class="ttc" id="event_8h_xhtml"><div class="ttname"><a href="event_8h.xhtml">event.h</a></div><div class="ttdoc">Contains event classes for fault trees. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1IfThenElse_xhtml_aa650d6f7eb404e52ffce429c6e08a747"><div class="ttname"><a href="classscram_1_1mef_1_1IfThenElse.xhtml#aa650d6f7eb404e52ffce429c6e08a747">scram::mef::IfThenElse::expression</a></div><div class="ttdeci">Expression * expression() const </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00118">event_tree.h:118</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1FunctionalEvent_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1FunctionalEvent.xhtml">scram::mef::FunctionalEvent</a></div><div class="ttdoc">Representation of functional events in event trees. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00263">event_tree.h:263</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Branch_xhtml_ac3ed6a402b65d84fcc5d0c2ed52e8d05"><div class="ttname"><a href="classscram_1_1mef_1_1Branch.xhtml#ac3ed6a402b65d84fcc5d0c2ed52e8d05">scram::mef::Branch::instructions</a></div><div class="ttdeci">void instructions(std::vector&lt; Instruction * &gt; instructions)</div><div class="ttdoc">Sets the instructions to execute at the branch. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00293">event_tree.h:293</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1EventTree_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1EventTree.xhtml">scram::mef::EventTree</a></div><div class="ttdoc">Event Tree representation with MEF constructs. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00368">event_tree.h:368</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Block_xhtml_a676b90f6be42e68a3c83cd63fc644fd8"><div class="ttname"><a href="classscram_1_1mef_1_1Block.xhtml#a676b90f6be42e68a3c83cd63fc644fd8">scram::mef::Block::Block</a></div><div class="ttdeci">Block(std::vector&lt; Instruction * &gt; instructions)</div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00137">event_tree.h:137</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Link_xhtml_a3886fbcbb5f9bc2ce3b45bc64a25559a"><div class="ttname"><a href="classscram_1_1mef_1_1Link.xhtml#a3886fbcbb5f9bc2ce3b45bc64a25559a">scram::mef::Link::event_tree</a></div><div class="ttdeci">const EventTree &amp; event_tree() const </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00183">event_tree.h:183</a></div></div>
<div class="ttc" id="namespacescram_xhtml"><div class="ttname"><a href="namespacescram.xhtml">scram</a></div><div class="ttdef"><b>Definition:</b> <a href="analysis_8cc_source.xhtml#l00023">analysis.cc:23</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1InstructionVisitor_xhtml_a6e511343744f2ac89798a54fb1b0babc"><div class="ttname"><a href="classscram_1_1mef_1_1InstructionVisitor.xhtml#a6e511343744f2ac89798a54fb1b0babc">scram::mef::InstructionVisitor::Visit</a></div><div class="ttdeci">virtual void Visit(const SetHouseEvent *)=0</div><div class="ttdoc">A set of required visitation functions for concrete visitors to implement. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1EventTree_xhtml_af6c8fa24558e26bbe305602ca86f9ae4"><div class="ttname"><a href="classscram_1_1mef_1_1EventTree.xhtml#af6c8fa24558e26bbe305602ca86f9ae4">scram::mef::EventTree::branches</a></div><div class="ttdeci">const ElementTable&lt; NamedBranchPtr &gt; &amp; branches() const </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00384">event_tree.h:384</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CollectExpression_xhtml_a37104b2f6774ce92968bec66a7c1facc"><div class="ttname"><a href="classscram_1_1mef_1_1CollectExpression.xhtml#a37104b2f6774ce92968bec66a7c1facc">scram::mef::CollectExpression::CollectExpression</a></div><div class="ttdeci">CollectExpression(Expression *expression)</div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00082">event_tree.h:82</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1SetHouseEvent_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1SetHouseEvent.xhtml">scram::mef::SetHouseEvent</a></div><div class="ttdoc">The operation to change house-events. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00059">event_tree.h:59</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Instruction_xhtml_a64ff8a04a3cce0febdf9fce4cc25d19a"><div class="ttname"><a href="classscram_1_1mef_1_1Instruction.xhtml#a64ff8a04a3cce0febdf9fce4cc25d19a">scram::mef::Instruction::Accept</a></div><div class="ttdeci">virtual void Accept(InstructionVisitor *visitor) const =0</div><div class="ttdoc">Applies the visitor to the object. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Link_xhtml_a72f41975cddffec2c78a6ec17a397634"><div class="ttname"><a href="classscram_1_1mef_1_1Link.xhtml#a72f41975cddffec2c78a6ec17a397634">scram::mef::Link::Link</a></div><div class="ttdeci">Link(const EventTree &amp;event_tree)</div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00180">event_tree.h:180</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Block_xhtml_a78250514b4f9959087dc96f37e74eff0"><div class="ttname"><a href="classscram_1_1mef_1_1Block.xhtml#a78250514b4f9959087dc96f37e74eff0">scram::mef::Block::instructions</a></div><div class="ttdeci">const std::vector&lt; Instruction * &gt; &amp; instructions() const </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00141">event_tree.h:141</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Rule_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Rule.xhtml">scram::mef::Rule</a></div><div class="ttdoc">A reusable collection of instructions. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00150">event_tree.h:150</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Link_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Link.xhtml">scram::mef::Link</a></div><div class="ttdoc">A link to another event tree in end-states only. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00177">event_tree.h:177</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Usage_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Usage.xhtml">scram::mef::Usage</a></div><div class="ttdoc">Mixin class for providing usage marks for elements. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00306">element.h:306</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Rule_xhtml_a609edf81ed71768db0f02ba2dfc14948"><div class="ttname"><a href="classscram_1_1mef_1_1Rule.xhtml#a609edf81ed71768db0f02ba2dfc14948">scram::mef::Rule::instructions</a></div><div class="ttdeci">const std::vector&lt; Instruction * &gt; &amp; instructions() const </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00164">event_tree.h:164</a></div></div>
<div class="ttc" id="element_8h_xhtml_ab162a6f742c23405f33db706d5a927b4"><div class="ttname"><a href="element_8h.xhtml#ab162a6f742c23405f33db706d5a927b4">scram::mef::ElementTable</a></div><div class="ttdeci">boost::multi_index_container&lt; T, boost::multi_index::indexed_by&lt; boost::multi_index::hashed_unique&lt; boost::multi_index::const_mem_fun&lt; Element, const std::string &amp;,&amp;Element::name &gt;&gt;&gt;&gt; ElementTable</div><div class="ttdoc">Table of elements with unique names. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00151">element.h:151</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1InstructionVisitor_xhtml_a100bdabeea8503c87dd349eda22e3b14"><div class="ttname"><a href="classscram_1_1mef_1_1InstructionVisitor.xhtml#a100bdabeea8503c87dd349eda22e3b14">scram::mef::InstructionVisitor::Visit</a></div><div class="ttdeci">virtual void Visit(const IfThenElse *ite)</div><div class="ttdoc">A set of required visitation functions for concrete visitors to implement. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00200">event_tree.h:200</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CollectFormula_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1CollectFormula.xhtml">scram::mef::CollectFormula</a></div><div class="ttdoc">The operation of connecting fault tree events into the event tree. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00093">event_tree.h:93</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NullVisitor_xhtml_ab1471e842002f3b841264b2710bdf369"><div class="ttname"><a href="classscram_1_1mef_1_1NullVisitor.xhtml#ab1471e842002f3b841264b2710bdf369">scram::mef::NullVisitor::Visit</a></div><div class="ttdeci">void Visit(const SetHouseEvent *) override</div><div class="ttdoc">A set of required visitation functions for concrete visitors to implement. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00221">event_tree.h:221</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CollectExpression_xhtml_a0be8ace1305ed498fca212a3b1a6938f"><div class="ttname"><a href="classscram_1_1mef_1_1CollectExpression.xhtml#a0be8ace1305ed498fca212a3b1a6938f">scram::mef::CollectExpression::expression</a></div><div class="ttdeci">Expression &amp; expression() const </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00086">event_tree.h:86</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CollectFormula_xhtml_a56a3cfe8798a0ed58a33d9a0b40d729c"><div class="ttname"><a href="classscram_1_1mef_1_1CollectFormula.xhtml#a56a3cfe8798a0ed58a33d9a0b40d729c">scram::mef::CollectFormula::formula</a></div><div class="ttdeci">Formula &amp; formula() const </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00099">event_tree.h:99</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Path_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Path.xhtml">scram::mef::Path</a></div><div class="ttdoc">Functional-event state paths in event trees. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00330">event_tree.h:330</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Fork_xhtml_aefffbc7850fbfad97b35e866ade81342"><div class="ttname"><a href="classscram_1_1mef_1_1Fork.xhtml#aefffbc7850fbfad97b35e866ade81342">scram::mef::Fork::paths</a></div><div class="ttdeci">std::vector&lt; Path &gt; &amp; paths()</div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00359">event_tree.h:359</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Visitable_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Visitable.xhtml">scram::mef::Visitable</a></div><div class="ttdoc">Default visit for instruction type of T. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00052">event_tree.h:52</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NaryExpression_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1NaryExpression.xhtml">scram::mef::NaryExpression</a></div><div class="ttdoc">n-ary expressions. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00168">expression.h:168</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Branch_xhtml_aef3fc76565228977c770034b8b01bc2c"><div class="ttname"><a href="classscram_1_1mef_1_1Branch.xhtml#aef3fc76565228977c770034b8b01bc2c">scram::mef::Branch::instructions</a></div><div class="ttdeci">const std::vector&lt; Instruction * &gt; &amp; instructions() const </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00298">event_tree.h:298</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Sequence_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Sequence.xhtml">scram::mef::Sequence</a></div><div class="ttdoc">Representation of sequences in event trees. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00238">event_tree.h:238</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1InstructionVisitor_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1InstructionVisitor.xhtml">scram::mef::InstructionVisitor</a></div><div class="ttdoc">The base abstract class for instruction visitors. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00190">event_tree.h:190</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Element_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Element.xhtml">scram::mef::Element</a></div><div class="ttdoc">Mixin class that represents any element of analysis that can have extra descriptions, such as attributes and a label. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00048">element.h:48</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1InitiatingEvent_xhtml_a6bdcfc44f13ba954e679bd72694ad22b"><div class="ttname"><a href="classscram_1_1mef_1_1InitiatingEvent.xhtml#a6bdcfc44f13ba954e679bd72694ad22b">scram::mef::InitiatingEvent::event_tree</a></div><div class="ttdeci">EventTree * event_tree()</div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00433">event_tree.h:433</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NullVisitor_xhtml_a6c9500b9e2f7d4e1dfa079469af5626f"><div class="ttname"><a href="classscram_1_1mef_1_1NullVisitor.xhtml#a6c9500b9e2f7d4e1dfa079469af5626f">scram::mef::NullVisitor::Visit</a></div><div class="ttdeci">void Visit(const IfThenElse *ite) override</div><div class="ttdoc">A set of required visitation functions for concrete visitors to implement. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00225">event_tree.h:225</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NullVisitor_xhtml_a3c02254bd74a2badea031f519c75b56f"><div class="ttname"><a href="classscram_1_1mef_1_1NullVisitor.xhtml#a3c02254bd74a2badea031f519c75b56f">scram::mef::NullVisitor::Visit</a></div><div class="ttdeci">void Visit(const Link *) override</div><div class="ttdoc">A set of required visitation functions for concrete visitors to implement. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00224">event_tree.h:224</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1EventTree_xhtml_a174d471ad629ca43a9abd30cfe34e82f"><div class="ttname"><a href="classscram_1_1mef_1_1EventTree.xhtml#a174d471ad629ca43a9abd30cfe34e82f">scram::mef::EventTree::functional_events</a></div><div class="ttdeci">const ElementTable&lt; FunctionalEventPtr &gt; &amp; functional_events() const </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00381">event_tree.h:381</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1CollectFormula_xhtml_a891f3de164fce7f15d0ad53dab1e95fd"><div class="ttname"><a href="classscram_1_1mef_1_1CollectFormula.xhtml#a891f3de164fce7f15d0ad53dab1e95fd">scram::mef::CollectFormula::CollectFormula</a></div><div class="ttdeci">CollectFormula(FormulaPtr formula)</div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00096">event_tree.h:96</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1SetHouseEvent_xhtml_a78d78cbf5e26fadf3efda96fbe5cb066"><div class="ttname"><a href="classscram_1_1mef_1_1SetHouseEvent.xhtml#a78d78cbf5e26fadf3efda96fbe5cb066">scram::mef::SetHouseEvent::name</a></div><div class="ttdeci">const std::string &amp; name() const </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00067">event_tree.h:67</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Branch_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Branch.xhtml">scram::mef::Branch</a></div><div class="ttdoc">The branch representation in event trees. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00287">event_tree.h:287</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_af4c1a5cb29e8f45623a99742b7ba8bc5"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#af4c1a5cb29e8f45623a99742b7ba8bc5">scram::mef::Expression::value</a></div><div class="ttdeci">virtual double value() noexcept=0</div></div>
<div class="ttc" id="classscram_1_1mef_1_1Fork_xhtml_ac82c25bb78d12a3bac21ea26cc5cdc99"><div class="ttname"><a href="classscram_1_1mef_1_1Fork.xhtml#ac82c25bb78d12a3bac21ea26cc5cdc99">scram::mef::Fork::paths</a></div><div class="ttdeci">const std::vector&lt; Path &gt; &amp; paths() const </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00358">event_tree.h:358</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Path_xhtml_a485a6b2f0e1897ed031ad234a18ec233"><div class="ttname"><a href="classscram_1_1mef_1_1Path.xhtml#a485a6b2f0e1897ed031ad234a18ec233">scram::mef::Path::state</a></div><div class="ttdeci">const std::string &amp; state() const </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00338">event_tree.h:338</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1EventTree_xhtml_a39fa946b1c05225c0a05735989403eeb"><div class="ttname"><a href="classscram_1_1mef_1_1EventTree.xhtml#a39fa946b1c05225c0a05735989403eeb">scram::mef::EventTree::initial_state</a></div><div class="ttdeci">void initial_state(Branch branch)</div><div class="ttdoc">Sets the initial state of the event tree. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00376">event_tree.h:376</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NullVisitor_xhtml_a387408bee706990d89424476f84a5a15"><div class="ttname"><a href="classscram_1_1mef_1_1NullVisitor.xhtml#a387408bee706990d89424476f84a5a15">scram::mef::NullVisitor::Visit</a></div><div class="ttdeci">void Visit(const CollectFormula *) override</div><div class="ttdoc">A set of required visitation functions for concrete visitors to implement. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00223">event_tree.h:223</a></div></div>
<div class="ttc" id="expression_8h_xhtml"><div class="ttname"><a href="expression_8h.xhtml">expression.h</a></div><div class="ttdoc">Provides the base class for all expressions and units for expression values. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1IfThenElse_xhtml_aab13d860d45d741cac43ccb2192a0072"><div class="ttname"><a href="classscram_1_1mef_1_1IfThenElse.xhtml#aab13d860d45d741cac43ccb2192a0072">scram::mef::IfThenElse::IfThenElse</a></div><div class="ttdeci">IfThenElse(Expression *expression, Instruction *then_instruction, Instruction *else_instruction=nullptr)</div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00111">event_tree.h:111</a></div></div>
<div class="ttc" id="variant_8h_xhtml"><div class="ttname"><a href="variant_8h.xhtml">variant.h</a></div><div class="ttdoc">Extra helper functions for boost::variant. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1NullVisitor_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1NullVisitor.xhtml">scram::mef::NullVisitor</a></div><div class="ttdoc">Visits only instructions and ignores non-instructions. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00219">event_tree.h:219</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml">scram::mef::Expression</a></div><div class="ttdoc">Abstract base class for all sorts of expressions to describe events. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00073">expression.h:73</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Branch_xhtml_a2d5ae6a8ba8ca8f81818d4c12172a5b5"><div class="ttname"><a href="classscram_1_1mef_1_1Branch.xhtml#a2d5ae6a8ba8ca8f81818d4c12172a5b5">scram::mef::Branch::target</a></div><div class="ttdeci">void target(Target target)</div><div class="ttdoc">Sets the target for the branch. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00303">event_tree.h:303</a></div></div>
<div class="ttc" id="event_8h_xhtml_ac2fb708d25c3bde3eadbcf12d0bfee02"><div class="ttname"><a href="event_8h.xhtml#ac2fb708d25c3bde3eadbcf12d0bfee02">scram::mef::FormulaPtr</a></div><div class="ttdeci">std::unique_ptr&lt; Formula &gt; FormulaPtr</div><div class="ttdoc">Non-shared gate formulas. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00159">event.h:159</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NamedBranch_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1NamedBranch.xhtml">scram::mef::NamedBranch</a></div><div class="ttdoc">Named branches that can be referenced and reused. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00319">event_tree.h:319</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Fork_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Fork.xhtml">scram::mef::Fork</a></div><div class="ttdoc">Functional event forks. </div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00345">event_tree.h:345</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Rule_xhtml_a6094da386afbd31ffa1843dc270a0e0f"><div class="ttname"><a href="classscram_1_1mef_1_1Rule.xhtml#a6094da386afbd31ffa1843dc270a0e0f">scram::mef::Rule::instructions</a></div><div class="ttdeci">void instructions(std::vector&lt; Instruction * &gt; instructions)</div><div class="ttdef"><b>Definition:</b> <a href="event__tree_8h_source.xhtml#l00158">event_tree.h:158</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1NodeMark_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1NodeMark.xhtml">scram::mef::NodeMark</a></div><div class="ttdoc">Mixin class for providing marks for graph nodes. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00281">element.h:281</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Tue Aug 1 2017 02:15:58 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
