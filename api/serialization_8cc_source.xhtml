<!-- HTML header for doxygen 1.8.11-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta name="robots" content="noindex, nofollow"/>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>serialization.cc Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectlogo"><img alt="Logo" src="scram_blue.png"/></td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_68267d1309a1af8e8297ef4c3efbcdba.xhtml">src</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">serialization.cc</div>  </div>
</div><!--header-->
<div class="contents">
<a href="serialization_8cc.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (C) 2017 Olzhas Rakhimov</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * This program is free software; you can redistribute it and/or modify</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * it under the terms of the GNU General Public License as published by</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * the Free Software Foundation; either version 3 of the License, or</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * (at your option) any later version.</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * This program is distributed in the hope that it will be useful,</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * but WITHOUT ANY WARRANTY; without even the implied warranty of</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> * GNU General Public License for more details.</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * You should have received a copy of the GNU General Public License</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> * along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">/// @file serialization.cc</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"></span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="serialization_8h.xhtml">serialization.h</a>&quot;</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;</div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#include &lt;fstream&gt;</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="preprocessor">#include &lt;ostream&gt;</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;</div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="element_8h.xhtml">element.h</a>&quot;</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="event_8h.xhtml">event.h</a>&quot;</span></div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="expression_8h.xhtml">expression.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="constant_8h.xhtml">expression/constant.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="exponential_8h.xhtml">expression/exponential.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="fault__tree_8h.xhtml">fault_tree.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="xml__stream_8h.xhtml">xml_stream.h</a>&quot;</span></div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;</div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacescram.xhtml">scram</a> {</div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="keyword">namespace </span>mef {</div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno"><a class="line" href="serialization_8cc.xhtml#a83f7058a5caad9ec3ffb5fd6c7d7b8f6">   36</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="serialization_8cc.xhtml#a83f7058a5caad9ec3ffb5fd6c7d7b8f6">Serialize</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Model.xhtml">Model</a>&amp; model, <span class="keyword">const</span> std::string&amp; file) {</div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;  std::ofstream of(file.c_str());</div><div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;  <span class="keywordflow">if</span> (!of.good())</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    <span class="keywordflow">throw</span> <a class="code" href="structscram_1_1IOError.xhtml">IOError</a>(file + <span class="stringliteral">&quot; : Cannot write the output file for serialization.&quot;</span>);</div><div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div><div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;  <a class="code" href="serialization_8cc.xhtml#a83f7058a5caad9ec3ffb5fd6c7d7b8f6">Serialize</a>(model, of);</div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;}</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;</div><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="keyword">namespace </span>{  <span class="comment">// The serialization helper functions for each model construct.</span></div><div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div><div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="keywordtype">void</span> SerializeLabelAndAttributes(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Element.xhtml">Element</a>&amp; element,</div><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;                                 <a class="code" href="classscram_1_1XmlStreamElement.xhtml">XmlStreamElement</a>* xml_element) {</div><div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;  <span class="keywordflow">if</span> (element.<a class="code" href="classscram_1_1mef_1_1Element.xhtml#a87e90b86d7599c2f60d7a7b99ab52d20">label</a>().empty() == <span class="keyword">false</span>)</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    xml_element-&gt;<a class="code" href="classscram_1_1XmlStreamElement.xhtml#ac8227ce1d2bf22ab83d3055a8e98fb2d">AddChild</a>(<span class="stringliteral">&quot;label&quot;</span>).<a class="code" href="classscram_1_1XmlStreamElement.xhtml#a414c693e59f68e95677ed91e48bae61a">AddText</a>(element.<a class="code" href="classscram_1_1mef_1_1Element.xhtml#a87e90b86d7599c2f60d7a7b99ab52d20">label</a>());</div><div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;  <span class="keywordflow">if</span> (element.<a class="code" href="classscram_1_1mef_1_1Element.xhtml#a25474d50f8cc2c6a728c88e4c7d1b9f1">attributes</a>().empty() == <span class="keyword">false</span>) {</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <a class="code" href="classscram_1_1XmlStreamElement.xhtml">XmlStreamElement</a> attributes_container = xml_element-&gt;<a class="code" href="classscram_1_1XmlStreamElement.xhtml#ac8227ce1d2bf22ab83d3055a8e98fb2d">AddChild</a>(<span class="stringliteral">&quot;attributes&quot;</span>);</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="structscram_1_1mef_1_1Attribute.xhtml">Attribute</a>&amp; attribute : element.<a class="code" href="classscram_1_1mef_1_1Element.xhtml#a25474d50f8cc2c6a728c88e4c7d1b9f1">attributes</a>()) {</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;      <a class="code" href="classscram_1_1XmlStreamElement.xhtml">XmlStreamElement</a> attribute_element =</div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;          attributes_container.<a class="code" href="classscram_1_1XmlStreamElement.xhtml#ac8227ce1d2bf22ab83d3055a8e98fb2d">AddChild</a>(<span class="stringliteral">&quot;attribute&quot;</span>);</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;      assert(attribute.name.empty() == <span class="keyword">false</span>);</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;      attribute_element.<a class="code" href="classscram_1_1XmlStreamElement.xhtml#a3f8cfc1031e589dac6e33ea98c9b0479">SetAttribute</a>(<span class="stringliteral">&quot;name&quot;</span>, attribute.name);</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;      assert(attribute.value.empty() == <span class="keyword">false</span>);</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;      attribute_element.<a class="code" href="classscram_1_1XmlStreamElement.xhtml#a3f8cfc1031e589dac6e33ea98c9b0479">SetAttribute</a>(<span class="stringliteral">&quot;value&quot;</span>, attribute.value);</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;      <span class="keywordflow">if</span> (attribute.type.empty() == <span class="keyword">false</span>)</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;        attribute_element.<a class="code" href="classscram_1_1XmlStreamElement.xhtml#a3f8cfc1031e589dac6e33ea98c9b0479">SetAttribute</a>(<span class="stringliteral">&quot;type&quot;</span>, attribute.type);</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    }</div><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;  }</div><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;}</div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="keywordtype">void</span> SerializeElement(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Element.xhtml">Element</a>&amp; element, <a class="code" href="classscram_1_1XmlStreamElement.xhtml">XmlStreamElement</a>* xml_element) {</div><div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;  xml_element-&gt;<a class="code" href="classscram_1_1XmlStreamElement.xhtml#a3f8cfc1031e589dac6e33ea98c9b0479">SetAttribute</a>(<span class="stringliteral">&quot;name&quot;</span>, element.<a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a>());</div><div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;  SerializeLabelAndAttributes(element, xml_element);</div><div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;}</div><div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="keywordtype">void</span> <a class="code" href="serialization_8cc.xhtml#a83f7058a5caad9ec3ffb5fd6c7d7b8f6">Serialize</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Formula.xhtml">Formula</a>&amp; formula, <a class="code" href="classscram_1_1XmlStreamElement.xhtml">XmlStreamElement</a>* parent) {</div><div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;  assert(formula.<a class="code" href="classscram_1_1mef_1_1Formula.xhtml#af3c5953f817cc202b5009cc4557c7d72">formula_args</a>().empty());</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;  <span class="keyword">struct </span>ArgStreamer {</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordtype">void</span> operator()(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Gate.xhtml">Gate</a>* gate)<span class="keyword"> const </span>{</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;      xml-&gt;AddChild(<span class="stringliteral">&quot;gate&quot;</span>).SetAttribute(<span class="stringliteral">&quot;name&quot;</span>, gate-&gt;<a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a>());</div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    }</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    <span class="keywordtype">void</span> operator()(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1BasicEvent.xhtml">BasicEvent</a>* basic_event)<span class="keyword"> const </span>{</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;      xml-&gt;AddChild(<span class="stringliteral">&quot;basic-event&quot;</span>).SetAttribute(<span class="stringliteral">&quot;name&quot;</span>, basic_event-&gt;<a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a>());</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    }</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordtype">void</span> operator()(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1HouseEvent.xhtml">HouseEvent</a>* house_event)<span class="keyword"> const </span>{</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;      xml-&gt;AddChild(<span class="stringliteral">&quot;house-event&quot;</span>).SetAttribute(<span class="stringliteral">&quot;name&quot;</span>, house_event-&gt;<a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a>());</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;    }</div><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    <a class="code" href="classscram_1_1XmlStreamElement.xhtml">XmlStreamElement</a>* xml;</div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;  };</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;  <span class="keywordflow">if</span> (formula.<a class="code" href="classscram_1_1mef_1_1Formula.xhtml#aaf6992ab41ab8ae013211fd861e726db">type</a>() == <a class="code" href="event_8h.xhtml#a72c93e03bc460b2c24a9f8057571d02aafe69fbd83def53b2925412796fbeebd8">kNull</a>) {</div><div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    assert(formula.<a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a4e86a729bae4629de0217c9f8c6960a0">event_args</a>().size() == 1);</div><div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    boost::apply_visitor(ArgStreamer{parent}, formula.<a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a4e86a729bae4629de0217c9f8c6960a0">event_args</a>().front());</div><div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;  } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <a class="code" href="classscram_1_1XmlStreamElement.xhtml">XmlStreamElement</a> type_element = [&amp;formula, &amp;parent] {</div><div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;      <span class="keywordflow">switch</span> (formula.<a class="code" href="classscram_1_1mef_1_1Formula.xhtml#aaf6992ab41ab8ae013211fd861e726db">type</a>()) {</div><div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="event_8h.xhtml#a72c93e03bc460b2c24a9f8057571d02aaabe07e269099a3d699ca88f86bab1cc1">kNot</a>:</div><div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;          <span class="keywordflow">return</span> parent-&gt;<a class="code" href="classscram_1_1XmlStreamElement.xhtml#ac8227ce1d2bf22ab83d3055a8e98fb2d">AddChild</a>(<span class="stringliteral">&quot;not&quot;</span>);</div><div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;        <span class="keywordflow">case</span> kAnd:</div><div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;          <span class="keywordflow">return</span> parent-&gt;<a class="code" href="classscram_1_1XmlStreamElement.xhtml#ac8227ce1d2bf22ab83d3055a8e98fb2d">AddChild</a>(<span class="stringliteral">&quot;and&quot;</span>);</div><div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;        <span class="keywordflow">case</span> kOr:</div><div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;          <span class="keywordflow">return</span> parent-&gt;<a class="code" href="classscram_1_1XmlStreamElement.xhtml#ac8227ce1d2bf22ab83d3055a8e98fb2d">AddChild</a>(<span class="stringliteral">&quot;or&quot;</span>);</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="event_8h.xhtml#a72c93e03bc460b2c24a9f8057571d02aa84dc77641f7e38d126a3cdde0c7ed687">kNand</a>:</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;          <span class="keywordflow">return</span> parent-&gt;<a class="code" href="classscram_1_1XmlStreamElement.xhtml#ac8227ce1d2bf22ab83d3055a8e98fb2d">AddChild</a>(<span class="stringliteral">&quot;nand&quot;</span>);</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="event_8h.xhtml#a72c93e03bc460b2c24a9f8057571d02aa28ae6864fb9d0133c1b092fa57833a16">kNor</a>:</div><div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;          <span class="keywordflow">return</span> parent-&gt;<a class="code" href="classscram_1_1XmlStreamElement.xhtml#ac8227ce1d2bf22ab83d3055a8e98fb2d">AddChild</a>(<span class="stringliteral">&quot;nor&quot;</span>);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="event_8h.xhtml#a72c93e03bc460b2c24a9f8057571d02aaa21649cb2e0bc2618074ae4b28968882">kXor</a>:</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;          <span class="keywordflow">return</span> parent-&gt;<a class="code" href="classscram_1_1XmlStreamElement.xhtml#ac8227ce1d2bf22ab83d3055a8e98fb2d">AddChild</a>(<span class="stringliteral">&quot;xor&quot;</span>);</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;        <span class="keywordflow">case</span> <a class="code" href="event_8h.xhtml#a72c93e03bc460b2c24a9f8057571d02aabad5adaa3eb70db097cfdb183981224e">kVote</a>:</div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;          <span class="keywordflow">return</span> [&amp;formula, &amp;parent] {</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;            <a class="code" href="classscram_1_1XmlStreamElement.xhtml">XmlStreamElement</a> atleast = parent-&gt;<a class="code" href="classscram_1_1XmlStreamElement.xhtml#ac8227ce1d2bf22ab83d3055a8e98fb2d">AddChild</a>(<span class="stringliteral">&quot;atleast&quot;</span>);</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;            atleast.<a class="code" href="classscram_1_1XmlStreamElement.xhtml#a3f8cfc1031e589dac6e33ea98c9b0479">SetAttribute</a>(<span class="stringliteral">&quot;min&quot;</span>, formula.<a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a73f9de40978aad0665e3a6d95e85e7a2">vote_number</a>());</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;            <span class="keywordflow">return</span> atleast;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;          }();  <span class="comment">// Wrap NRVO into RVO for GCC.</span></div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;        <span class="keywordflow">default</span>:</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;          assert(<span class="keyword">false</span> &amp;&amp; <span class="stringliteral">&quot;Unexpected formula&quot;</span>);</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;      }</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    }();</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a51646ffe5483c9c3500a98a517bddadf">Formula::EventArg</a>&amp; arg : formula.<a class="code" href="classscram_1_1mef_1_1Formula.xhtml#a4e86a729bae4629de0217c9f8c6960a0">event_args</a>())</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;      boost::apply_visitor(ArgStreamer{&amp;type_element}, arg);</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;  }</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;}</div><div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="keywordtype">void</span> <a class="code" href="serialization_8cc.xhtml#a83f7058a5caad9ec3ffb5fd6c7d7b8f6">Serialize</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Gate.xhtml">Gate</a>&amp; gate, <a class="code" href="classscram_1_1XmlStreamElement.xhtml">XmlStreamElement</a>* parent) {</div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;  assert(gate.<a class="code" href="classscram_1_1mef_1_1Role.xhtml#aa1843c29411c29b27d79414d34525bbc">role</a>() == RoleSpecifier::kPublic);</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;  <a class="code" href="classscram_1_1XmlStreamElement.xhtml">XmlStreamElement</a> gate_element = parent-&gt;<a class="code" href="classscram_1_1XmlStreamElement.xhtml#ac8227ce1d2bf22ab83d3055a8e98fb2d">AddChild</a>(<span class="stringliteral">&quot;define-gate&quot;</span>);</div><div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;  SerializeElement(gate, &amp;gate_element);</div><div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;  <a class="code" href="serialization_8cc.xhtml#a83f7058a5caad9ec3ffb5fd6c7d7b8f6">Serialize</a>(gate.<a class="code" href="classscram_1_1mef_1_1Gate.xhtml#abde84a63a060e2424ab92431634f21d9">formula</a>(), &amp;gate_element);</div><div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;}</div><div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;</div><div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="keywordtype">void</span> <a class="code" href="serialization_8cc.xhtml#a83f7058a5caad9ec3ffb5fd6c7d7b8f6">Serialize</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1FaultTree.xhtml">FaultTree</a>&amp; fault_tree, <a class="code" href="classscram_1_1XmlStreamElement.xhtml">XmlStreamElement</a>* parent) {</div><div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;  assert(fault_tree.<a class="code" href="classscram_1_1mef_1_1Component.xhtml#a483f7a67e2197449902bddc48756e2cd">components</a>().empty());</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;  assert(fault_tree.<a class="code" href="classscram_1_1mef_1_1Role.xhtml#aa1843c29411c29b27d79414d34525bbc">role</a>() == RoleSpecifier::kPublic);</div><div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;  <a class="code" href="classscram_1_1XmlStreamElement.xhtml">XmlStreamElement</a> ft_element = parent-&gt;<a class="code" href="classscram_1_1XmlStreamElement.xhtml#ac8227ce1d2bf22ab83d3055a8e98fb2d">AddChild</a>(<span class="stringliteral">&quot;define-fault-tree&quot;</span>);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;  SerializeElement(fault_tree, &amp;ft_element);</div><div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;  <span class="keywordflow">for</span> (<a class="code" href="classscram_1_1mef_1_1Gate.xhtml">Gate</a>* gate : fault_tree.<a class="code" href="classscram_1_1mef_1_1Component.xhtml#ad246305a79904f65b36157096464703b">gates</a>())</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <a class="code" href="serialization_8cc.xhtml#a83f7058a5caad9ec3ffb5fd6c7d7b8f6">Serialize</a>(*gate, &amp;ft_element);</div><div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;}</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="keywordtype">void</span> <a class="code" href="serialization_8cc.xhtml#a83f7058a5caad9ec3ffb5fd6c7d7b8f6">Serialize</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>&amp; expression, <a class="code" href="classscram_1_1XmlStreamElement.xhtml">XmlStreamElement</a>* parent) {</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;  <span class="keywordflow">if</span> (<span class="keyword">const</span> <span class="keyword">auto</span>* constant =</div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;          dynamic_cast&lt;const ConstantExpression*&gt;(&amp;expression)) {<span class="comment"></span></div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="comment">    /// @todo Track the original value type of the constant expression.</span></div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="comment"></span>    parent-&gt;<a class="code" href="classscram_1_1XmlStreamElement.xhtml#ac8227ce1d2bf22ab83d3055a8e98fb2d">AddChild</a>(<span class="stringliteral">&quot;float&quot;</span>).<a class="code" href="classscram_1_1XmlStreamElement.xhtml#a3f8cfc1031e589dac6e33ea98c9b0479">SetAttribute</a>(</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;        <span class="stringliteral">&quot;value&quot;</span>, const_cast&lt;ConstantExpression*&gt;(constant)-&gt;value());</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;  } <span class="keywordflow">else</span> <span class="keywordflow">if</span> (<span class="keyword">const</span> <span class="keyword">auto</span>* exponential =</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;                 dynamic_cast&lt;const Exponential*&gt;(&amp;expression)) {</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <a class="code" href="classscram_1_1XmlStreamElement.xhtml">XmlStreamElement</a> xml = parent-&gt;<a class="code" href="classscram_1_1XmlStreamElement.xhtml#ac8227ce1d2bf22ab83d3055a8e98fb2d">AddChild</a>(<span class="stringliteral">&quot;exponential&quot;</span>);</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    assert(exponential-&gt;args().size() == 2);</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Expression.xhtml">Expression</a>* arg : exponential-&gt;<a class="code" href="classscram_1_1mef_1_1Expression.xhtml#ac22fdb9ced7ef6942f666337b6a34110">args</a>())</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;      <a class="code" href="serialization_8cc.xhtml#a83f7058a5caad9ec3ffb5fd6c7d7b8f6">Serialize</a>(*arg, &amp;xml);</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;  } <span class="keywordflow">else</span> {</div><div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    assert(<span class="keyword">false</span> &amp;&amp; <span class="stringliteral">&quot;Unsupported expression&quot;</span>);</div><div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;  }</div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;}</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div><div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;<span class="keywordtype">void</span> <a class="code" href="serialization_8cc.xhtml#a83f7058a5caad9ec3ffb5fd6c7d7b8f6">Serialize</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1BasicEvent.xhtml">BasicEvent</a>&amp; basic_event, <a class="code" href="classscram_1_1XmlStreamElement.xhtml">XmlStreamElement</a>* parent) {</div><div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;  assert(basic_event.<a class="code" href="classscram_1_1mef_1_1Role.xhtml#aa1843c29411c29b27d79414d34525bbc">role</a>() == RoleSpecifier::kPublic);</div><div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;  <a class="code" href="classscram_1_1XmlStreamElement.xhtml">XmlStreamElement</a> be_element = parent-&gt;<a class="code" href="classscram_1_1XmlStreamElement.xhtml#ac8227ce1d2bf22ab83d3055a8e98fb2d">AddChild</a>(<span class="stringliteral">&quot;define-basic-event&quot;</span>);</div><div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;  SerializeElement(basic_event, &amp;be_element);</div><div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;  <span class="keywordflow">if</span> (basic_event.<a class="code" href="classscram_1_1mef_1_1BasicEvent.xhtml#ab6b4e5fd2ce8a81ae887902be30c2b29">HasExpression</a>())</div><div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <a class="code" href="serialization_8cc.xhtml#a83f7058a5caad9ec3ffb5fd6c7d7b8f6">Serialize</a>(basic_event.<a class="code" href="classscram_1_1mef_1_1BasicEvent.xhtml#ab9764640b00bcc3f7241c5bf185d8f2a">expression</a>(), &amp;be_element);</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;}</div><div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;<span class="keywordtype">void</span> <a class="code" href="serialization_8cc.xhtml#a83f7058a5caad9ec3ffb5fd6c7d7b8f6">Serialize</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1HouseEvent.xhtml">HouseEvent</a>&amp; house_event, <a class="code" href="classscram_1_1XmlStreamElement.xhtml">XmlStreamElement</a>* parent) {</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;  assert(house_event.<a class="code" href="classscram_1_1mef_1_1Role.xhtml#aa1843c29411c29b27d79414d34525bbc">role</a>() == RoleSpecifier::kPublic);</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;  assert(&amp;house_event != &amp;<a class="code" href="classscram_1_1mef_1_1HouseEvent.xhtml#add3768ebd5e4f11c0032f8dcfdf0486e">HouseEvent::kTrue</a> &amp;&amp;</div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;         &amp;house_event != &amp;<a class="code" href="classscram_1_1mef_1_1HouseEvent.xhtml#a39cb01e8c82942942da00d6537deeb72">HouseEvent::kFalse</a>);</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;  <a class="code" href="classscram_1_1XmlStreamElement.xhtml">XmlStreamElement</a> he_element = parent-&gt;<a class="code" href="classscram_1_1XmlStreamElement.xhtml#ac8227ce1d2bf22ab83d3055a8e98fb2d">AddChild</a>(<span class="stringliteral">&quot;define-house-event&quot;</span>);</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;  SerializeElement(house_event, &amp;he_element);</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;  he_element.<a class="code" href="classscram_1_1XmlStreamElement.xhtml#ac8227ce1d2bf22ab83d3055a8e98fb2d">AddChild</a>(<span class="stringliteral">&quot;constant&quot;</span>)</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;      .<a class="code" href="classscram_1_1XmlStreamElement.xhtml#a3f8cfc1031e589dac6e33ea98c9b0479">SetAttribute</a>(<span class="stringliteral">&quot;value&quot;</span>, house_event.<a class="code" href="classscram_1_1mef_1_1HouseEvent.xhtml#a15ab4daf36b62127703cf610bdc80183">state</a>() ? <span class="stringliteral">&quot;true&quot;</span> : <span class="stringliteral">&quot;false&quot;</span>);</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;}</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;}  <span class="comment">// namespace</span></div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div><div class="line"><a name="l00171"></a><span class="lineno"><a class="line" href="serialization_8cc.xhtml#a12094f882cf779ecac838576c86954ee">  171</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="serialization_8cc.xhtml#a83f7058a5caad9ec3ffb5fd6c7d7b8f6">Serialize</a>(<span class="keyword">const</span> <a class="code" href="classscram_1_1mef_1_1Model.xhtml">Model</a>&amp; model, std::ostream&amp; out) {</div><div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;  out &lt;&lt; <span class="stringliteral">&quot;&lt;?xml version=\&quot;1.0\&quot; encoding=\&quot;UTF-8\&quot;?&gt;\n&quot;</span>;</div><div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;  <a class="code" href="classscram_1_1XmlStreamElement.xhtml">XmlStreamElement</a> root(<span class="stringliteral">&quot;opsa-mef&quot;</span>, out);</div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;  <span class="keywordflow">if</span> (!model.<a class="code" href="classscram_1_1mef_1_1Model.xhtml#a742b8f5f989b633eeeeb192d2e793181">HasDefaultName</a>())</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    root.<a class="code" href="classscram_1_1XmlStreamElement.xhtml#a3f8cfc1031e589dac6e33ea98c9b0479">SetAttribute</a>(<span class="stringliteral">&quot;name&quot;</span>, model.<a class="code" href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">name</a>());</div><div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;  SerializeLabelAndAttributes(model, &amp;root);<span class="comment"></span></div><div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;<span class="comment">  /// @todo Implement serialization for the following unsupported constructs.</span></div><div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;<span class="comment"></span>  assert(model.<a class="code" href="classscram_1_1mef_1_1Model.xhtml#a5c8b03561207b374fc06dd61c0cf3ace">ccf_groups</a>().empty());</div><div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;  assert(model.<a class="code" href="classscram_1_1mef_1_1Model.xhtml#a698156baa445c530089d57601e19bb35">parameters</a>().empty());</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;  assert(model.<a class="code" href="classscram_1_1mef_1_1Model.xhtml#a04f7628e1d3a27295d2ac7bbdc7ab26b">initiating_events</a>().empty());</div><div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;  assert(model.<a class="code" href="classscram_1_1mef_1_1Model.xhtml#a97786aaa61d59617a0b08dcd518d0d68">event_trees</a>().empty());</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;  assert(model.<a class="code" href="classscram_1_1mef_1_1Model.xhtml#afbb8bfee9de066a3341d34ef5ce885e4">sequences</a>().empty());</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;  assert(model.<a class="code" href="classscram_1_1mef_1_1Model.xhtml#a52198e362df1827d583eceed7306eb6f">rules</a>().empty());</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;</div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="fault__tree_8h.xhtml#a8538f816ccf630916e93bd1432fa07d6">FaultTreePtr</a>&amp; fault_tree : model.<a class="code" href="classscram_1_1mef_1_1Model.xhtml#a9bac9a7746026484f3dc69a3ccb2ac4a">fault_trees</a>())</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    <a class="code" href="serialization_8cc.xhtml#a83f7058a5caad9ec3ffb5fd6c7d7b8f6">Serialize</a>(*fault_tree, &amp;root);</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;  <a class="code" href="classscram_1_1XmlStreamElement.xhtml">XmlStreamElement</a> model_data = root.<a class="code" href="classscram_1_1XmlStreamElement.xhtml#ac8227ce1d2bf22ab83d3055a8e98fb2d">AddChild</a>(<span class="stringliteral">&quot;model-data&quot;</span>);</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="event_8h.xhtml#a77a3414d54d1ed73527bc929354d0508">BasicEventPtr</a>&amp; basic_event : model.<a class="code" href="classscram_1_1mef_1_1Model.xhtml#ada7804d62fc594bff7b080c680586209">basic_events</a>())</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <a class="code" href="serialization_8cc.xhtml#a83f7058a5caad9ec3ffb5fd6c7d7b8f6">Serialize</a>(*basic_event, &amp;model_data);</div><div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">const</span> <a class="code" href="event_8h.xhtml#af2bc060f951b2dcb63fb313d3800f9f3">HouseEventPtr</a>&amp; house_event : model.<a class="code" href="classscram_1_1mef_1_1Model.xhtml#a2ddd6d121e1ab6fbe140fc3fb449cd96">house_events</a>())</div><div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    <a class="code" href="serialization_8cc.xhtml#a83f7058a5caad9ec3ffb5fd6c7d7b8f6">Serialize</a>(*house_event, &amp;model_data);</div><div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;}</div><div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div><div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;}  <span class="comment">// namespace mef</span></div><div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;}  <span class="comment">// namespace scram</span></div><div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml">scram::mef::Formula</a></div><div class="ttdoc">Boolean formula with operators and arguments. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00228">event.h:228</a></div></div>
<div class="ttc" id="structscram_1_1IOError_xhtml"><div class="ttname"><a href="structscram_1_1IOError.xhtml">scram::IOError</a></div><div class="ttdoc">For input/output related errors. </div><div class="ttdef"><b>Definition:</b> <a href="error_8h_source.xhtml#l00094">error.h:94</a></div></div>
<div class="ttc" id="event_8h_xhtml_a72c93e03bc460b2c24a9f8057571d02aa28ae6864fb9d0133c1b092fa57833a16"><div class="ttname"><a href="event_8h.xhtml#a72c93e03bc460b2c24a9f8057571d02aa28ae6864fb9d0133c1b092fa57833a16">scram::mef::kNor</a></div><div class="ttdoc">Not OR. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00214">event.h:214</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Role_xhtml_aa1843c29411c29b27d79414d34525bbc"><div class="ttname"><a href="classscram_1_1mef_1_1Role.xhtml#aa1843c29411c29b27d79414d34525bbc">scram::mef::Role::role</a></div><div class="ttdeci">RoleSpecifier role() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00175">element.h:175</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Model_xhtml_a97786aaa61d59617a0b08dcd518d0d68"><div class="ttname"><a href="classscram_1_1mef_1_1Model.xhtml#a97786aaa61d59617a0b08dcd518d0d68">scram::mef::Model::event_trees</a></div><div class="ttdeci">const ElementTable&lt; EventTreePtr &gt; &amp; event_trees() const </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00084">model.h:84</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml_ad246305a79904f65b36157096464703b"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml#ad246305a79904f65b36157096464703b">scram::mef::Component::gates</a></div><div class="ttdeci">const ElementTable&lt; Gate * &gt; &amp; gates() const </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8h_source.xhtml#l00064">fault_tree.h:64</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Model_xhtml_a2ddd6d121e1ab6fbe140fc3fb449cd96"><div class="ttname"><a href="classscram_1_1mef_1_1Model.xhtml#a2ddd6d121e1ab6fbe140fc3fb449cd96">scram::mef::Model::house_events</a></div><div class="ttdeci">const IdTable&lt; HouseEventPtr &gt; &amp; house_events() const </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00091">model.h:91</a></div></div>
<div class="ttc" id="fault__tree_8h_xhtml"><div class="ttname"><a href="fault__tree_8h.xhtml">fault_tree.h</a></div><div class="ttdoc">Fault Tree and Component containers. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1BasicEvent_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1BasicEvent.xhtml">scram::mef::BasicEvent</a></div><div class="ttdoc">Representation of a basic event in a fault tree. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00076">event.h:76</a></div></div>
<div class="ttc" id="element_8h_xhtml"><div class="ttname"><a href="element_8h.xhtml">element.h</a></div><div class="ttdoc">Helper classes, structs, and properties common to all other classes. </div></div>
<div class="ttc" id="classscram_1_1XmlStreamElement_xhtml_ac8227ce1d2bf22ab83d3055a8e98fb2d"><div class="ttname"><a href="classscram_1_1XmlStreamElement.xhtml#ac8227ce1d2bf22ab83d3055a8e98fb2d">scram::XmlStreamElement::AddChild</a></div><div class="ttdeci">XmlStreamElement AddChild(const char *name)</div><div class="ttdoc">Adds a child element to the element. </div><div class="ttdef"><b>Definition:</b> <a href="xml__stream_8cc_source.xhtml#l00072">xml_stream.cc:72</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Gate_xhtml_abde84a63a060e2424ab92431634f21d9"><div class="ttname"><a href="classscram_1_1mef_1_1Gate.xhtml#abde84a63a060e2424ab92431634f21d9">scram::mef::Gate::formula</a></div><div class="ttdeci">const Formula &amp; formula() const </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00174">event.h:174</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1HouseEvent_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1HouseEvent.xhtml">scram::mef::HouseEvent</a></div><div class="ttdoc">Representation of a house event in a fault tree. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00050">event.h:50</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Model_xhtml_a698156baa445c530089d57601e19bb35"><div class="ttname"><a href="classscram_1_1mef_1_1Model.xhtml#a698156baa445c530089d57601e19bb35">scram::mef::Model::parameters</a></div><div class="ttdeci">const IdTable&lt; ParameterPtr &gt; &amp; parameters() const </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00088">model.h:88</a></div></div>
<div class="ttc" id="xml__stream_8h_xhtml"><div class="ttname"><a href="xml__stream_8h.xhtml">xml_stream.h</a></div><div class="ttdoc">Facilities to stream data in XML format. </div></div>
<div class="ttc" id="event_8h_xhtml_a72c93e03bc460b2c24a9f8057571d02aabad5adaa3eb70db097cfdb183981224e"><div class="ttname"><a href="event_8h.xhtml#a72c93e03bc460b2c24a9f8057571d02aabad5adaa3eb70db097cfdb183981224e">scram::mef::kVote</a></div><div class="ttdoc">Combination, K/N, atleast, or Vote gate representation. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00210">event.h:210</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml_ac22fdb9ced7ef6942f666337b6a34110"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml#ac22fdb9ced7ef6942f666337b6a34110">scram::mef::Expression::args</a></div><div class="ttdeci">const std::vector&lt; Expression * &gt; &amp; args() const </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00084">expression.h:84</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml_aaf6992ab41ab8ae013211fd861e726db"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml#aaf6992ab41ab8ae013211fd861e726db">scram::mef::Formula::type</a></div><div class="ttdeci">Operator type() const </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00239">event.h:239</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Model_xhtml_a04f7628e1d3a27295d2ac7bbdc7ab26b"><div class="ttname"><a href="classscram_1_1mef_1_1Model.xhtml#a04f7628e1d3a27295d2ac7bbdc7ab26b">scram::mef::Model::initiating_events</a></div><div class="ttdeci">const ElementTable&lt; InitiatingEventPtr &gt; &amp; initiating_events() const </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00081">model.h:81</a></div></div>
<div class="ttc" id="event_8h_xhtml_af2bc060f951b2dcb63fb313d3800f9f3"><div class="ttname"><a href="event_8h.xhtml#af2bc060f951b2dcb63fb313d3800f9f3">scram::mef::HouseEventPtr</a></div><div class="ttdeci">std::unique_ptr&lt; HouseEvent &gt; HouseEventPtr</div><div class="ttdoc">Convenience aliases for smart pointers. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00153">event.h:153</a></div></div>
<div class="ttc" id="classscram_1_1XmlStreamElement_xhtml_a414c693e59f68e95677ed91e48bae61a"><div class="ttname"><a href="classscram_1_1XmlStreamElement.xhtml#a414c693e59f68e95677ed91e48bae61a">scram::XmlStreamElement::AddText</a></div><div class="ttdeci">void AddText(T &amp;&amp;text)</div><div class="ttdoc">Adds text to the element. </div><div class="ttdef"><b>Definition:</b> <a href="xml__stream_8h_source.xhtml#l00130">xml_stream.h:130</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1HouseEvent_xhtml_a15ab4daf36b62127703cf610bdc80183"><div class="ttname"><a href="classscram_1_1mef_1_1HouseEvent.xhtml#a15ab4daf36b62127703cf610bdc80183">scram::mef::HouseEvent::state</a></div><div class="ttdeci">void state(bool constant)</div><div class="ttdoc">Sets the state for House event. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00062">event.h:62</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml_a4e86a729bae4629de0217c9f8c6960a0"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml#a4e86a729bae4629de0217c9f8c6960a0">scram::mef::Formula::event_args</a></div><div class="ttdeci">const std::vector&lt; EventArg &gt; &amp; event_args() const </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00259">event.h:259</a></div></div>
<div class="ttc" id="exponential_8h_xhtml"><div class="ttname"><a href="exponential_8h.xhtml">exponential.h</a></div><div class="ttdoc">Expressions and distributions that are described with exponential formulas. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Model_xhtml_a742b8f5f989b633eeeeb192d2e793181"><div class="ttname"><a href="classscram_1_1mef_1_1Model.xhtml#a742b8f5f989b633eeeeb192d2e793181">scram::mef::Model::HasDefaultName</a></div><div class="ttdeci">bool HasDefaultName() const </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00059">model.h:59</a></div></div>
<div class="ttc" id="event_8h_xhtml_a72c93e03bc460b2c24a9f8057571d02aaabe07e269099a3d699ca88f86bab1cc1"><div class="ttname"><a href="event_8h.xhtml#a72c93e03bc460b2c24a9f8057571d02aaabe07e269099a3d699ca88f86bab1cc1">scram::mef::kNot</a></div><div class="ttdoc">Boolean negation. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00212">event.h:212</a></div></div>
<div class="ttc" id="event_8h_xhtml"><div class="ttname"><a href="event_8h.xhtml">event.h</a></div><div class="ttdoc">Contains event classes for fault trees. </div></div>
<div class="ttc" id="structscram_1_1mef_1_1Attribute_xhtml"><div class="ttname"><a href="structscram_1_1mef_1_1Attribute.xhtml">scram::mef::Attribute</a></div><div class="ttdoc">This struct allows any attribute. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00038">element.h:38</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml_af3c5953f817cc202b5009cc4557c7d72"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml#af3c5953f817cc202b5009cc4557c7d72">scram::mef::Formula::formula_args</a></div><div class="ttdeci">const std::vector&lt; FormulaPtr &gt; &amp; formula_args() const </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00260">event.h:260</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Element_xhtml_a25474d50f8cc2c6a728c88e4c7d1b9f1"><div class="ttname"><a href="classscram_1_1mef_1_1Element.xhtml#a25474d50f8cc2c6a728c88e4c7d1b9f1">scram::mef::Element::attributes</a></div><div class="ttdeci">const std::vector&lt; Attribute &gt; &amp; attributes() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00073">element.h:73</a></div></div>
<div class="ttc" id="fault__tree_8h_xhtml_a8538f816ccf630916e93bd1432fa07d6"><div class="ttname"><a href="fault__tree_8h.xhtml#a8538f816ccf630916e93bd1432fa07d6">scram::mef::FaultTreePtr</a></div><div class="ttdeci">std::unique_ptr&lt; FaultTree &gt; FaultTreePtr</div><div class="ttdoc">Unique trees in models. </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8h_source.xhtml#l00182">fault_tree.h:182</a></div></div>
<div class="ttc" id="constant_8h_xhtml"><div class="ttname"><a href="constant_8h.xhtml">constant.h</a></div><div class="ttdoc">Constant expressions that cannot have uncertainties. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Component_xhtml_a483f7a67e2197449902bddc48756e2cd"><div class="ttname"><a href="classscram_1_1mef_1_1Component.xhtml#a483f7a67e2197449902bddc48756e2cd">scram::mef::Component::components</a></div><div class="ttdeci">const ElementTable&lt; std::unique_ptr&lt; Component &gt; &gt; &amp; components() const </div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8h_source.xhtml#l00073">fault_tree.h:73</a></div></div>
<div class="ttc" id="classscram_1_1XmlStreamElement_xhtml_a3f8cfc1031e589dac6e33ea98c9b0479"><div class="ttname"><a href="classscram_1_1XmlStreamElement.xhtml#a3f8cfc1031e589dac6e33ea98c9b0479">scram::XmlStreamElement::SetAttribute</a></div><div class="ttdeci">XmlStreamElement &amp; SetAttribute(const char *name, T &amp;&amp;value)</div><div class="ttdoc">Sets the attributes for the element. </div><div class="ttdef"><b>Definition:</b> <a href="xml__stream_8h_source.xhtml#l00107">xml_stream.h:107</a></div></div>
<div class="ttc" id="namespacescram_xhtml"><div class="ttname"><a href="namespacescram.xhtml">scram</a></div><div class="ttdef"><b>Definition:</b> <a href="analysis_8cc_source.xhtml#l00023">analysis.cc:23</a></div></div>
<div class="ttc" id="serialization_8cc_xhtml_a83f7058a5caad9ec3ffb5fd6c7d7b8f6"><div class="ttname"><a href="serialization_8cc.xhtml#a83f7058a5caad9ec3ffb5fd6c7d7b8f6">scram::mef::Serialize</a></div><div class="ttdeci">void Serialize(const Model &amp;model, const std::string &amp;file)</div><div class="ttdoc">Convenience function for serialization into a file. </div><div class="ttdef"><b>Definition:</b> <a href="serialization_8cc_source.xhtml#l00036">serialization.cc:36</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1BasicEvent_xhtml_ab6b4e5fd2ce8a81ae887902be30c2b29"><div class="ttname"><a href="classscram_1_1mef_1_1BasicEvent.xhtml#ab6b4e5fd2ce8a81ae887902be30c2b29">scram::mef::BasicEvent::HasExpression</a></div><div class="ttdeci">bool HasExpression() const </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00083">event.h:83</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Model_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Model.xhtml">scram::mef::Model</a></div><div class="ttdoc">This class represents a risk analysis model. </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00043">model.h:43</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1BasicEvent_xhtml_ab9764640b00bcc3f7241c5bf185d8f2a"><div class="ttname"><a href="classscram_1_1mef_1_1BasicEvent.xhtml#ab9764640b00bcc3f7241c5bf185d8f2a">scram::mef::BasicEvent::expression</a></div><div class="ttdeci">void expression(Expression *expression)</div><div class="ttdoc">Sets the expression of this basic event. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00089">event.h:89</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1HouseEvent_xhtml_a39cb01e8c82942942da00d6537deeb72"><div class="ttname"><a href="classscram_1_1mef_1_1HouseEvent.xhtml#a39cb01e8c82942942da00d6537deeb72">scram::mef::HouseEvent::kFalse</a></div><div class="ttdeci">static HouseEvent kFalse</div><div class="ttdoc">Literal False event. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00053">event.h:53</a></div></div>
<div class="ttc" id="serialization_8h_xhtml"><div class="ttname"><a href="serialization_8h.xhtml">serialization.h</a></div><div class="ttdoc">The MEF Model serialization facilities. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Element_xhtml_a87e90b86d7599c2f60d7a7b99ab52d20"><div class="ttname"><a href="classscram_1_1mef_1_1Element.xhtml#a87e90b86d7599c2f60d7a7b99ab52d20">scram::mef::Element::label</a></div><div class="ttdeci">const std::string &amp; label() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00065">element.h:65</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Model_xhtml_a52198e362df1827d583eceed7306eb6f"><div class="ttname"><a href="classscram_1_1mef_1_1Model.xhtml#a52198e362df1827d583eceed7306eb6f">scram::mef::Model::rules</a></div><div class="ttdeci">const ElementTable&lt; RulePtr &gt; &amp; rules() const </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00086">model.h:86</a></div></div>
<div class="ttc" id="event_8h_xhtml_a72c93e03bc460b2c24a9f8057571d02aa84dc77641f7e38d126a3cdde0c7ed687"><div class="ttname"><a href="event_8h.xhtml#a72c93e03bc460b2c24a9f8057571d02aa84dc77641f7e38d126a3cdde0c7ed687">scram::mef::kNand</a></div><div class="ttdoc">Not AND. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00213">event.h:213</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Gate_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Gate.xhtml">scram::mef::Gate</a></div><div class="ttdoc">A representation of a gate in a fault tree. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00162">event.h:162</a></div></div>
<div class="ttc" id="event_8h_xhtml_a72c93e03bc460b2c24a9f8057571d02aaa21649cb2e0bc2618074ae4b28968882"><div class="ttname"><a href="event_8h.xhtml#a72c93e03bc460b2c24a9f8057571d02aaa21649cb2e0bc2618074ae4b28968882">scram::mef::kXor</a></div><div class="ttdoc">Exclusive OR gate with two inputs only. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00211">event.h:211</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1HouseEvent_xhtml_add3768ebd5e4f11c0032f8dcfdf0486e"><div class="ttname"><a href="classscram_1_1mef_1_1HouseEvent.xhtml#add3768ebd5e4f11c0032f8dcfdf0486e">scram::mef::HouseEvent::kTrue</a></div><div class="ttdeci">static HouseEvent kTrue</div><div class="ttdoc">Literal True event. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00052">event.h:52</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Model_xhtml_afbb8bfee9de066a3341d34ef5ce885e4"><div class="ttname"><a href="classscram_1_1mef_1_1Model.xhtml#afbb8bfee9de066a3341d34ef5ce885e4">scram::mef::Model::sequences</a></div><div class="ttdeci">const ElementTable&lt; SequencePtr &gt; &amp; sequences() const </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00085">model.h:85</a></div></div>
<div class="ttc" id="classscram_1_1XmlStreamElement_xhtml"><div class="ttname"><a href="classscram_1_1XmlStreamElement.xhtml">scram::XmlStreamElement</a></div><div class="ttdoc">Writer of data formed as an XML element to a stream. </div><div class="ttdef"><b>Definition:</b> <a href="xml__stream_8h_source.xhtml#l00065">xml_stream.h:65</a></div></div>
<div class="ttc" id="event_8h_xhtml_a72c93e03bc460b2c24a9f8057571d02aafe69fbd83def53b2925412796fbeebd8"><div class="ttname"><a href="event_8h.xhtml#a72c93e03bc460b2c24a9f8057571d02aafe69fbd83def53b2925412796fbeebd8">scram::mef::kNull</a></div><div class="ttdoc">Single argument pass-through without logic. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00215">event.h:215</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Element_xhtml_adb401e2ca84aa98cb60797bec2500a81"><div class="ttname"><a href="classscram_1_1mef_1_1Element.xhtml#adb401e2ca84aa98cb60797bec2500a81">scram::mef::Element::name</a></div><div class="ttdeci">const std::string &amp; name() const </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00061">element.h:61</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1FaultTree_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1FaultTree.xhtml">scram::mef::FaultTree</a></div><div class="ttdoc">Fault tree representation as a container of gates, basic and house events, and other information...</div><div class="ttdef"><b>Definition:</b> <a href="fault__tree_8h_source.xhtml#l00143">fault_tree.h:143</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Element_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Element.xhtml">scram::mef::Element</a></div><div class="ttdoc">Mixin class that represents any element of analysis that can have extra descriptions, such as attributes and a label. </div><div class="ttdef"><b>Definition:</b> <a href="element_8h_source.xhtml#l00048">element.h:48</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml_a73f9de40978aad0665e3a6d95e85e7a2"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml#a73f9de40978aad0665e3a6d95e85e7a2">scram::mef::Formula::vote_number</a></div><div class="ttdeci">int vote_number() const </div><div class="ttdef"><b>Definition:</b> <a href="event_8cc_source.xhtml#l00072">event.cc:72</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Model_xhtml_ada7804d62fc594bff7b080c680586209"><div class="ttname"><a href="classscram_1_1mef_1_1Model.xhtml#ada7804d62fc594bff7b080c680586209">scram::mef::Model::basic_events</a></div><div class="ttdeci">const IdTable&lt; BasicEventPtr &gt; &amp; basic_events() const </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00092">model.h:92</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Model_xhtml_a9bac9a7746026484f3dc69a3ccb2ac4a"><div class="ttname"><a href="classscram_1_1mef_1_1Model.xhtml#a9bac9a7746026484f3dc69a3ccb2ac4a">scram::mef::Model::fault_trees</a></div><div class="ttdeci">const ElementTable&lt; FaultTreePtr &gt; &amp; fault_trees() const </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00087">model.h:87</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Formula_xhtml_a51646ffe5483c9c3500a98a517bddadf"><div class="ttname"><a href="classscram_1_1mef_1_1Formula.xhtml#a51646ffe5483c9c3500a98a517bddadf">scram::mef::Formula::EventArg</a></div><div class="ttdeci">boost::variant&lt; Gate *, BasicEvent *, HouseEvent * &gt; EventArg</div><div class="ttdoc">Event arguments of a formula. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00231">event.h:231</a></div></div>
<div class="ttc" id="event_8h_xhtml_a77a3414d54d1ed73527bc929354d0508"><div class="ttname"><a href="event_8h.xhtml#a77a3414d54d1ed73527bc929354d0508">scram::mef::BasicEventPtr</a></div><div class="ttdeci">std::unique_ptr&lt; BasicEvent &gt; BasicEventPtr</div><div class="ttdoc">Convenience aliases for smart pointers. </div><div class="ttdef"><b>Definition:</b> <a href="event_8h_source.xhtml#l00154">event.h:154</a></div></div>
<div class="ttc" id="classscram_1_1mef_1_1Model_xhtml_a5c8b03561207b374fc06dd61c0cf3ace"><div class="ttname"><a href="classscram_1_1mef_1_1Model.xhtml#a5c8b03561207b374fc06dd61c0cf3ace">scram::mef::Model::ccf_groups</a></div><div class="ttdeci">const IdTable&lt; CcfGroupPtr &gt; &amp; ccf_groups() const </div><div class="ttdef"><b>Definition:</b> <a href="model_8h_source.xhtml#l00094">model.h:94</a></div></div>
<div class="ttc" id="expression_8h_xhtml"><div class="ttname"><a href="expression_8h.xhtml">expression.h</a></div><div class="ttdoc">Provides the base class for all expressions and units for expression values. </div></div>
<div class="ttc" id="classscram_1_1mef_1_1Expression_xhtml"><div class="ttname"><a href="classscram_1_1mef_1_1Expression.xhtml">scram::mef::Expression</a></div><div class="ttdoc">Abstract base class for all sorts of expressions to describe events. </div><div class="ttdef"><b>Definition:</b> <a href="expression_8h_source.xhtml#l00073">expression.h:73</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Tue Aug 1 2017 02:15:59 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
